/* SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO"; */

--
-- SQLINES DEMO *** ANAGER'
--
-- SQLINES DEMO *** ---------------------------------------



-- SQLINES DEMO *** ---------------------------------------
--
-- SQLINES DEMO *** OR TABLE 'CATEGORIES'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE CATEGORIES (
CATEGORIES_ID NUMBER(10) NOT NULL,
CATEGORIES_IMAGE VARCHAR2(64) DEFAULT NULL,
PARENT_ID NUMBER(10) DEFAULT '0' NOT NULL,
SORT_ORDER NUMBER(10) DEFAULT NULL,
DATE_ADDED TIMESTAMP(0) DEFAULT NULL,
LAST_MODIFIED TIMESTAMP(0) DEFAULT NULL,
CATEGORIES_STATUS NUMBER(3) DEFAULT '1',
VISIBLE NUMBER(3) DEFAULT '1',
REFCATEGORYID NUMBER(10),
REFCATEGORYLEVEL NUMBER(10),
REFCATEGORYNAME VARCHAR2(255),
REFCATEGORYPARENTID VARCHAR2(11),
REFEXPIRED VARCHAR2(5),
MERCHANTID NUMBER(10) DEFAULT '0' NOT NULL,
DEPTH NUMBER(10) DEFAULT '0',
LINEAGE CLOB NULL,
PRIMARY KEY (CATEGORIES_ID)
CREATE INDEX IDX_PARENT_ID_CAT_ID_SM ON CATEGORIES (PARENT_ID,CATEGORIES_ID)
CREATE INDEX IDX_STATUS_CAT_SM ON CATEGORIES (CATEGORIES_STATUS)
CREATE INDEX IDX_SORT_ORDER_SM ON CATEGORIES (SORT_ORDER)
CREATE INDEX IDX_MERCHANT_ID_SM ON CATEGORIES (MERCHANTID)
CREATE INDEX IDX_MERCHANT_ID_LINEAGE ON CATEGORIES (MERCHANTID,LINEAGE(512))
) ENGINE=INNODB DEFAULT CHARSET=UTF8 COLLATE=UTF8_UNICODE_CI;


-- SQLINES DEMO *** ---------------------------------------
--
-- SQLINES DEMO *** OR TABLE 'CATEGORIES_DESCRIPTION'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE CATEGORIES_DESCRIPTION (
CATEGORIES_ID NUMBER(10) DEFAULT '0' NOT NULL,
LANGUAGE_ID NUMBER(10) DEFAULT '1' NOT NULL,
CATEGORIES_NAME VARCHAR2(32) DEFAULT '' NOT NULL,
CATEGORIES_DESCRIPTION CLOB,
SE_URL_SRC VARCHAR2(100) NULL,
SE_URL VARCHAR2(100) NULL,
METATAG_TITLE VARCHAR2(255) DEFAULT '' NULL,
METATAG_KEYWORDS CLOB NULL,
METATAG_DESCRIPTION CLOB NULL,
CATEGORIES_TITLE VARCHAR2(120) NULL,
PRIMARY KEY (CATEGORIES_ID,LANGUAGE_ID)
) ;

CREATE INDEX IDX_CATEGORIES_NAME_SM ON CATEGORIES_DESCRIPTION (CATEGORIES_NAME);
CREATE INDEX IDX_CATEGORIES_ID_SM ON CATEGORIES_DESCRIPTION (CATEGORIES_ID);
CREATE INDEX IDX_CATEGORIES_SE_SM ON CATEGORIES_DESCRIPTION (SE_URL);



-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'CENTRAL_CHANNELS'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE CENTRAL_CHANNELS (
CENTRAL_CHANNELS_ID NUMBER(10) NOT NULL,
CENTRAL_CHANNEL_CODE NUMBER(10) DEFAULT '1' NOT NULL,
CENTRAL_CHANNEL_DESCRIPTION VARCHAR2(40) DEFAULT NULL,
CENTRAL_CHANNEL_POSITION NUMBER(3) DEFAULT '0',
CENTRAL_CHANNEL_VISIBLE NUMBER(3) DEFAULT '0',
LAST_MODIFIED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
PRIMARY KEY (CENTRAL_CHANNELS_ID),
CONSTRAINT UNQ_CHANNEL_GROUP_KEY UNIQUE (CENTRAL_CHANNEL_CODE)
) ;

-- Generate ID using sequence and trigger
CREATE SEQUENCE CENTRAL_CHANNELS_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER CENTRAL_CHANNELS_seq_tr
 BEFORE INSERT ON CENTRAL_CHANNELS FOR EACH ROW
 WHEN (NEW.CENTRAL_CHANNELS_ID IS NULL)
BEGIN
 SELECT CENTRAL_CHANNELS_seq.NEXTVAL INTO :NEW.CENTRAL_CHANNELS_ID FROM DUAL;
END;
/


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'CENTRAL_COUNTRIES_STATUS'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE CENTRAL_COUNTRIES_STATUS (
CENTRAL_COUNTRIES_STATUS_ID NUMBER(10) NOT NULL,
COUNTRIES_ID NUMBER(10) NOT NULL,
CENTRAL_COUNTRIES_STATUS_CODE NUMBER(10) DEFAULT '-1',
CENTRAL_COUNTRIES_CODE CHAR(2) DEFAULT '0',
DATE_ADDED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF') NOT NULL,
PRIMARY KEY (CENTRAL_COUNTRIES_STATUS_ID)
) ;

-- Generate ID using sequence and trigger
CREATE SEQUENCE CENTRAL_COUNTRIES_STATUS_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER CENTRAL_COUNTRIES_STATUS_seq_tr
 BEFORE INSERT ON CENTRAL_COUNTRIES_STATUS FOR EACH ROW
 WHEN (NEW.CENTRAL_COUNTRIES_STATUS_ID IS NULL)
BEGIN
 SELECT CENTRAL_COUNTRIES_STATUS_seq.NEXTVAL INTO :NEW.CENTRAL_COUNTRIES_STATUS_ID FROM DUAL;
END;
/

CREATE INDEX IDX_CENTRAL_COUNTRIES_STATUS ON CENTRAL_COUNTRIES_STATUS (CENTRAL_COUNTRIES_STATUS_CODE);


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'CENTRAL_CREDIT_CARDS'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE CENTRAL_CREDIT_CARDS (
CENTRAL_CREDIT_CARDS_ID NUMBER(10) NOT NULL,
CENTRAL_CREDIT_CARDS_CODE VARCHAR2(3) DEFAULT '1',
CENTRAL_CREDIT_CARDS_DESC VARCHAR2(40) DEFAULT NULL,
CENTRAL_CREDIT_CARDS_POSITION NUMBER(3) DEFAULT '0',
CENTRAL_CREDIT_CARDS_VISIBLE NUMBER(3) DEFAULT '0',
LAST_MODIFIED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
PRIMARY KEY (CENTRAL_CREDIT_CARDS_ID),
CONSTRAINT UNQ_CCARD_KEY UNIQUE (CENTRAL_CREDIT_CARDS_CODE)
) ;

-- Generate ID using sequence and trigger
CREATE SEQUENCE CENTRAL_CREDIT_CARDS_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER CENTRAL_CREDIT_CARDS_seq_tr
 BEFORE INSERT ON CENTRAL_CREDIT_CARDS FOR EACH ROW
 WHEN (NEW.CENTRAL_CREDIT_CARDS_ID IS NULL)
BEGIN
 SELECT CENTRAL_CREDIT_CARDS_seq.NEXTVAL INTO :NEW.CENTRAL_CREDIT_CARDS_ID FROM DUAL;
END;
/


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'CENTRAL_FUNCTION'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE CENTRAL_FUNCTION (
CENTRAL_FUNCTION_ID NUMBER(10) NOT NULL,
CENTRAL_FUNCTION_CODE VARCHAR2(10) DEFAULT '',
CENTRAL_GROUP_CODE VARCHAR2(10) DEFAULT '',
CENTRAL_FUNCTION_DESCRIPTION VARCHAR2(40) DEFAULT NULL,
CENTRAL_FUNCTION_POSITION NUMBER(3) DEFAULT '0',
CENTRAL_FUNCTION_VISIBLE NUMBER(3) DEFAULT '0',
CENTRAL_FUNCTION_URL VARCHAR2(255) DEFAULT NULL,
CENTRAL_FUNCTION_NEW NUMBER(3) DEFAULT '0',
CENTRAL_FUNCTION_NEW_UNTIL TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
LAST_MODIFIED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
PRIMARY KEY (CENTRAL_FUNCTION_ID),
CONSTRAINT UNQ_CENTRAL_FUNCTION_KEY UNIQUE (CENTRAL_FUNCTION_CODE)
) ;

-- Generate ID using sequence and trigger
CREATE SEQUENCE CENTRAL_FUNCTION_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER CENTRAL_FUNCTION_seq_tr
 BEFORE INSERT ON CENTRAL_FUNCTION FOR EACH ROW
 WHEN (NEW.CENTRAL_FUNCTION_ID IS NULL)
BEGIN
 SELECT CENTRAL_FUNCTION_seq.NEXTVAL INTO :NEW.CENTRAL_FUNCTION_ID FROM DUAL;
END;
/

CREATE INDEX IDX_KEY_CENTRAL_FUNCTION ON CENTRAL_FUNCTION (CENTRAL_GROUP_CODE);


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'CENTRAL_REGISTRATION_ASSOCIATION'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE CENTRAL_REG_ASSOCIATION (
CENTRAL_REG_ASSOCIATION_ID NUMBER(10) NOT NULL,
MERCHANT_REGISTRATION_DEF_CODE NUMBER(10) NOT NULL,
CENTRAL_GROUP_CODE VARCHAR2(10) DEFAULT '',
CENTRAL_FUNCTION_CODE VARCHAR2(10) DEFAULT '',
PROMOTION_CODE NUMBER(10) DEFAULT '0',
LAST_MODIFIED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
PRIMARY KEY (CENTRAL_REG_ASSOCIATION_ID),
CONSTRAINT UNQ_CENTRAL_REG_ASS_KEY UNIQUE (MERCHANT_REGISTRATION_DEF_CODE,CENTRAL_GROUP_CODE,CENTRAL_FUNCTION_CODE,PROMOTION_CODE)
) ;

CREATE INDEX IDX_KEY_CENTRAL_FUNCTION_1 ON CENTRAL_REG_ASSOCIATION (MERCHANT_REGISTRATION_DEF_CODE,CENTRAL_GROUP_CODE);
CREATE INDEX IDX_KEY_CENTRAL_FUNCTION_2 ON CENTRAL_REG_ASSOCIATION (MERCHANT_REGISTRATION_DEF_CODE,CENTRAL_FUNCTION_CODE);


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'CENTRAL_GROUP'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE CENTRAL_GROUP (
CENTRAL_GROUP_ID NUMBER(10) NOT NULL,
CENTRAL_GROUP_CODE VARCHAR2(10) DEFAULT '' NOT NULL,
CENTRAL_GROUP_DESCRIPTION VARCHAR2(40) DEFAULT NULL,
CENTRAL_GROUP_POSITION NUMBER(3) DEFAULT '0' NOT NULL,
CENTRAL_GROUP_VISIBLE NUMBER(3) DEFAULT '0' NOT NULL,
CENTRAL_GROUP_NEW NUMBER(3) DEFAULT '0' NOT NULL,
CENTRAL_GROUP_NEW_UNTIL TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
LAST_MODIFIED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
PRIMARY KEY (CENTRAL_GROUP_ID),
CONSTRAINT UNQ_CENTRAL_GROUP_KEY UNIQUE (CENTRAL_GROUP_CODE)
) ;

-- Generate ID using sequence and trigger
CREATE SEQUENCE CENTRAL_GROUP_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER CENTRAL_GROUP_seq_tr
 BEFORE INSERT ON CENTRAL_GROUP FOR EACH ROW
 WHEN (NEW.CENTRAL_GROUP_ID IS NULL)
BEGIN
 SELECT CENTRAL_GROUP_seq.NEXTVAL INTO :NEW.CENTRAL_GROUP_ID FROM DUAL;
END;
/


-- SQLINES DEMO *** ---------------------------------------


--
-- SQLINES DEMO *** OR TABLE 'CENTRAL_INTEGRATION_ERRORS'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE CENTRAL_INTEGRATION_ERRORS (
CENTRAL_INTEGRATION_ERRORS_ID NUMBER(10) NOT NULL,
MERCHANTID NUMBER(10) DEFAULT '0' NOT NULL,
CENTRAL_INTEGRATION_ERR_DESC VARCHAR2(255) DEFAULT NULL,
DATE_ADDED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
PRIMARY KEY (CENTRAL_INTEGRATION_ERRORS_ID)
) ;

CREATE INDEX IDX_CENTRAL_INT_ERRORS ON CENTRAL_INTEGRATION_ERRORS (MERCHANTID);



-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'CORE_MODULES_SERVICES'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE CORE_MODULES_SERVICES (
CORE_MD_SERVICES_ID NUMBER(10) NOT NULL,
CORE_MD_SERVICES_CODE NUMBER(10) NOT NULL,
CORE_MD_NAME VARCHAR2(60) NOT NULL,
COUNTRY_ISO_CODE_2 CHAR(2) DEFAULT 'XX' NOT NULL,
CORE_MD_SERVICES_SUBTYPE NUMBER(10) DEFAULT '0' NOT NULL,
CORE_MD_SERVICES_DESCRIPTION VARCHAR2(100) DEFAULT NULL,
CORE_MD_SERVICES_LOGO_PATH CLOB,
CORE_MD_SERVICES_POSITION NUMBER(3) DEFAULT '0',
CORE_MD_SERVICES_VISIBLE NUMBER(3) DEFAULT '0',
CORE_MD_SERVICES_NEW NUMBER(3) DEFAULT '1',
CORE_MD_SERVICES_URL VARCHAR2(120) DEFAULT NULL,
CORE_MD_SERVICES_DEV_PROTOCOL VARCHAR2(10) DEFAULT NULL,
CORE_MD_SERVICES_DEV_DOMAIN VARCHAR2(75) DEFAULT NULL,
CORE_MD_SERVICES_DEV_PORT VARCHAR2(10) DEFAULT NULL,
CORE_MD_SERVICES_DEV_ENV VARCHAR2(100) DEFAULT NULL,
CORE_MD_SERVICES_PROD_PROTOCOL VARCHAR2(10) DEFAULT NULL,
CORE_MD_SERVICES_PROD_DOMAIN VARCHAR2(75) DEFAULT NULL,
CORE_MD_SERVICES_PROD_PORT VARCHAR2(10) DEFAULT NULL,
CORE_MD_SERVICES_PROD_ENV VARCHAR2(75) DEFAULT NULL,
CORE_MD_SERVICES_CONFIGURABLE NUMBER(3) DEFAULT '0',
PRIMARY KEY (CORE_MD_SERVICES_ID)
) ;

-- Generate ID using sequence and trigger
CREATE SEQUENCE CORE_MODULES_SERVICES_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER CORE_MODULES_SERVICES_seq_tr
 BEFORE INSERT ON CORE_MODULES_SERVICES FOR EACH ROW
 WHEN (NEW.CORE_MD_SERVICES_ID IS NULL)
BEGIN
 SELECT CORE_MODULES_SERVICES_seq.NEXTVAL INTO :NEW.CORE_MD_SERVICES_ID FROM DUAL;
END;
/

CREATE INDEX IDX_CORE_MODULES_SERVICES ON CORE_MODULES_SERVICES (CORE_MD_SERVICES_CODE,COUNTRY_ISO_CODE_2,CORE_MD_NAME);



-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'CENTRAL_MEASURE_UNITS'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE CENTRAL_MEASURE_UNITS (
CENTRAL_MEASURE_UNITS_ID NUMBER(10) NOT NULL,
CENTRAL_MEASURE_UNITS_TYPE NUMBER(10) NOT NULL,
CENTRAL_MEASURE_UNITS_CODE CHAR(5) NOT NULL,
DATE_ADDED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
PRIMARY KEY (CENTRAL_MEASURE_UNITS_ID)
) ;

-- Generate ID using sequence and trigger
CREATE SEQUENCE CENTRAL_MEASURE_UNITS_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER CENTRAL_MEASURE_UNITS_seq_tr
 BEFORE INSERT ON CENTRAL_MEASURE_UNITS FOR EACH ROW
 WHEN (NEW.CENTRAL_MEASURE_UNITS_ID IS NULL)
BEGIN
 SELECT CENTRAL_MEASURE_UNITS_seq.NEXTVAL INTO :NEW.CENTRAL_MEASURE_UNITS_ID FROM DUAL;
END;
/

CREATE INDEX IDX_CENTRAL_MEASURE_UNITS_CODE ON CENTRAL_MEASURE_UNITS (CENTRAL_MEASURE_UNITS_CODE);


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'CENTRAL_SEQUENCER'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE CENTRAL_SEQUENCER (
CENTRAL_SEQUENCER_ID NUMBER(10) DEFAULT '0' NOT NULL,
CUST_BASKET_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
CUST_BASKET_ATTR_ID_NEXT_VAL NUMBER(10) DEFAULT '0' NOT NULL,
MERCHANT_CONF_ID_NEXT_VAL NUMBER(10) DEFAULT '0' NOT NULL,
MERCHANT_USER_INFO_ID_NEXT_VAL NUMBER(10) DEFAULT '0' NOT NULL,
CATEGORY_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCT_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCT_OPTIONS_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCT_ATTR_ID_NEXT_VAL NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCT_PRICE_ID_NEXT_VAL NUMBER(10) DEFAULT '0' NOT NULL,
GEO_ZONE_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
TAX_RATE_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCT_OPTION_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCT_OPT_VALUES_ID_NEXT_VAL NUMBER(10) DEFAULT '0' NOT NULL,
ORDER_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
CUSTOMER_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
ORDER_TOTAL_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
ORDER_PRODUCT_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
ORDER_PRD_PRICE_ID_NEXT_VAL NUMBER(10) DEFAULT '0' NOT NULL,
ORDER_PRODUCT_ATTR_ID_NEXT_VAL NUMBER(10) DEFAULT '0' NOT NULL,
ORDER_PRODUCT_DL_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL, 
ORDER_ACCOUNT_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
ORDER_ACCOUNT_PRD_ID_NEXT_VAL NUMBER(10) DEFAULT '0' NOT NULL,
ORDER_ACCNT_PRD_PRICE_ID_N_VAL NUMBER(10) DEFAULT '0' NOT NULL,
ORDER_ACCNT_PRD_ATTR_ID_N_VAL NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCT_SPECIAL_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
DYNAMIC_LABEL_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
GATEWAY_TRX_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
REVIEW_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
MERCHANTID_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
CRA_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
CIE_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
MANUFACTURERS_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
MRD_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
MUR_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
GTGZ_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
STATUS_HIST_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
RELATIONSHIP_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
TAXCLASS_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
PORTLET_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
PAGE_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
PAGEFLOW_ID_NEXT_VALUE NUMBER(10) DEFAULT '0' NOT NULL,
PRIMARY KEY (CENTRAL_SEQUENCER_ID)
) ;


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'COUNTRIES'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE COUNTRIES (
COUNTRIES_ID NUMBER(10) NOT NULL,
COUNTRIES_ISO_CODE_2 CHAR(2) DEFAULT '' NOT NULL,
COUNTRIES_ISO_CODE_3 CHAR(3) DEFAULT '' NOT NULL,
COUNTRIES_GROUP_CODE CHAR(3) DEFAULT '',
ADDRESS_FORMAT_ID NUMBER(10) DEFAULT '0' NOT NULL,
SUPPORTED NUMBER(3) DEFAULT '0' NOT NULL,
PRIMARY KEY (COUNTRIES_ID)
) ;

-- Generate ID using sequence and trigger
CREATE SEQUENCE COUNTRIES_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER COUNTRIES_seq_tr
 BEFORE INSERT ON COUNTRIES FOR EACH ROW
 WHEN (NEW.COUNTRIES_ID IS NULL)
BEGIN
 SELECT COUNTRIES_seq.NEXTVAL INTO :NEW.COUNTRIES_ID FROM DUAL;
END;
/

CREATE INDEX IDX_ADDRESS_FORMAT_ID_SM ON COUNTRIES (ADDRESS_FORMAT_ID);
CREATE INDEX IDX_ISO_2_SM ON COUNTRIES (COUNTRIES_ISO_CODE_2);
CREATE INDEX IDX_ISO_3_SM ON COUNTRIES (COUNTRIES_ISO_CODE_3);
CREATE INDEX IDX_CODE_SM ON COUNTRIES (COUNTRIES_GROUP_CODE);

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE COUNTRIES_DESCRIPTION (
COUNTRIES_ID NUMBER(10) NOT NULL,
LANGUAGE_ID NUMBER(10) DEFAULT '1' NOT NULL,
COUNTRIES_NAME VARCHAR2(64) DEFAULT '' NOT NULL,
PRIMARY KEY (COUNTRIES_ID,LANGUAGE_ID)
) ;

CREATE INDEX IDX_COUNTRIES_NAME_SM ON COUNTRIES_DESCRIPTION (COUNTRIES_NAME);


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'CURRENCIES'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE CURRENCIES (
CURRENCIES_ID NUMBER(10) NOT NULL,
TITLE VARCHAR2(32) DEFAULT '' NOT NULL,
CODE CHAR(3) DEFAULT '' NOT NULL,
SYMBOL VARCHAR2(10) DEFAULT NULL,
SUFFIX VARCHAR2(10) DEFAULT NULL,
DECIMAL_POINT CHAR(1) DEFAULT NULL,
THOUSANDS_POINT CHAR(1) DEFAULT NULL,
DECIMAL_PLACES CHAR(1) DEFAULT NULL,
VALUE BINARY_DOUBLE DEFAULT NULL,
LAST_UPDATED TIMESTAMP(0) DEFAULT NULL,
SUPPORTED NUMBER(3) DEFAULT '0' NOT NULL,
PRIMARY KEY (CURRENCIES_ID)
) ;

-- Generate ID using sequence and trigger
CREATE SEQUENCE CURRENCIES_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER CURRENCIES_seq_tr
 BEFORE INSERT ON CURRENCIES FOR EACH ROW
 WHEN (NEW.CURRENCIES_ID IS NULL)
BEGIN
 SELECT CURRENCIES_seq.NEXTVAL INTO :NEW.CURRENCIES_ID FROM DUAL;
END;
/

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'CUSTOMERS'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE CUSTOMERS (
CUSTOMERS_ID NUMBER(10) NOT NULL,
CUSTOMERS_GENDER CHAR(1) DEFAULT '',
CUSTOMERS_FIRSTNAME VARCHAR2(32) DEFAULT '' NOT NULL,
CUSTOMERS_LASTNAME VARCHAR2(32) DEFAULT '' NOT NULL,
CUSTOMERS_DOB TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
CUSTOMERS_EMAIL_ADDRESS VARCHAR2(96) DEFAULT '' NOT NULL,
CUSTOMERS_NICK VARCHAR2(96) DEFAULT '',
CUSTOMERS_TELEPHONE VARCHAR2(32) DEFAULT '' NOT NULL,
CUSTOMERS_ADDRESS VARCHAR2(256) DEFAULT '' NOT NULL,
CUSTOMERS_POSTALCODE VARCHAR2(20) DEFAULT '' NOT NULL,
CUSTOMERS_CITY VARCHAR2(100) DEFAULT '' NOT NULL,
CUSTOMERS_COMPANY VARCHAR2(100) DEFAULT '' NULL,
CUSTOMERS_STATE VARCHAR2(100) DEFAULT '',
CUSTOMERS_ZONE NUMBER(10) NOT NULL,
CUSTOMERS_COUNTRY NUMBER(10) NOT NULL,
CUSTOMERS_BILLING_FIRSTNAME VARCHAR2(32) NULL,
CUSTOMERS_BILLING_LASTNAME VARCHAR2(32) NULL,
CUSTOMERS_BILLING_COMPANY VARCHAR2(100) NULL,
CUSTOMERS_BILLING_ADDRESS VARCHAR2(256) DEFAULT '' NULL,
CUSTOMERS_BILLING_POSTALCODE VARCHAR2(20) DEFAULT '' NULL,
CUSTOMERS_BILLING_CITY VARCHAR2(100) DEFAULT '' NULL,
CUSTOMERS_BILLING_STATE VARCHAR2(100) DEFAULT '' NULL,
CUSTOMERS_BILLING_ZONE NUMBER(10) DEFAULT 0 NULL,
CUSTOMERS_BILLING_COUNTRY NUMBER(10) DEFAULT 0 NULL,
CUSTOMERS_FAX VARCHAR2(32) DEFAULT NULL,
CUSTOMERS_PASSWORD VARCHAR2(40) DEFAULT '',
CUSTOMERS_NEWSLETTER CHAR(1) DEFAULT NULL,
CUSTOMERS_GROUP_PRICING NUMBER(10) DEFAULT '0',
CUSTOMERS_EMAIL_FORMAT VARCHAR2(4) DEFAULT 'TEXT',
CUSTOMERS_AUTHORIZATION NUMBER(10) DEFAULT '0',
CUSTOMERS_REFERRAL VARCHAR2(32) DEFAULT '',
CUSTOMERS_ANONYMOUS NUMBER(3) DEFAULT '0' CHECK (CUSTOMERS_ANONYMOUS > 0),
CUSTOMERS_LANG VARCHAR2(2) DEFAULT 'EN' NOT NULL,
MERCHANTID NUMBER(10) DEFAULT '0' NOT NULL,
PRIMARY KEY (CUSTOMERS_ID)
CREATE INDEX IDX_EMAIL_ADDRESS_SM ON CUSTOMERS (CUSTOMERS_EMAIL_ADDRESS)
CREATE INDEX IDX_REFERRAL_SM ON CUSTOMERS (CUSTOMERS_REFERRAL(10)),
KEY IDX_GRP_PRICING_SM (CUSTOMERS_GROUP_PRICING),
KEY IDX_NICK_SM (CUSTOMERS_NICK),
KEY IDX_LAST_NAME_SM (CUSTOMERS_LASTNAME),
KEY IDX_NEWSLETTER_SM (CUSTOMERS_NEWSLETTER),
KEY IDX_MID_SM_CUST (MERCHANTID),
KEY IDX_COMPANY_SM (MERCHANTID,CUSTOMERS_COMPANY(25)),
KEY IDX_COUNTRY_SM (CUSTOMERS_COUNTRY)
) ENGINE=INNODB DEFAULT CHARSET=UTF8 COLLATE=UTF8_UNICODE_CI;

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'CUSTOMERS_BASKET'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE CUSTOMERS_BASKET (
CUSTOMERS_BASKET_ID NUMBER(10) NOT NULL,
CUSTOMERS_ID NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCTS_ID VARCHAR2(255) NOT NULL,
CUSTOMERS_BASKET_QUANTITY NUMBER(10) DEFAULT '0' NOT NULL,
FINAL_PRICE NUMBER(15,4) DEFAULT '0.0000' NOT NULL,
CUSTOMERS_BASKET_DATE_ADDED VARCHAR2(8) DEFAULT NULL,
MERCHANTID NUMBER(10) DEFAULT '0',
PRIMARY KEY (CUSTOMERS_BASKET_ID)
) ;

CREATE INDEX IDX_CUST_ID_BASK_SM ON CUSTOMERS_BASKET (CUSTOMERS_ID);


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'CUSTOMERS_BASKET_ATTRIBUTES'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE CUSTOMERS_BASKET_ATTRIBUTES (
CUSTOMERS_BASKET_ATTRIBUTES_ID NUMBER(10) NOT NULL,
CUSTOMERS_ID NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCTS_ID VARCHAR2(255) NOT NULL,
PRODUCTS_OPTIONS_ID VARCHAR2(64) DEFAULT '0' NOT NULL,
PRODUCTS_OPTIONS_VALUE_ID NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCTS_OPTIONS_VALUE_TEXT VARCHAR2(255),
PRODUCTS_OPTIONS_SORT_ORDER CLOB NOT NULL,
MERCHANTID NUMBER(10) DEFAULT '0',
PRIMARY KEY (CUSTOMERS_BASKET_ATTRIBUTES_ID)
CREATE INDEX IDX_CUST_ID_PROD_ID_SM ON CUSTOMERS_BASKET_ATTRIBUTES (CUSTOMERS_ID,PRODUCTS_ID(36))
) ENGINE=INNODB DEFAULT CHARSET=UTF8 COLLATE=UTF8_UNICODE_CI;


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'CUSTOMERS_INFO'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE CUSTOMERS_INFO (
CUSTOMERS_INFO_ID NUMBER(10) DEFAULT '0' NOT NULL,
CUSTOMERS_INFO_DT_LAST_LOGON TIMESTAMP(0) DEFAULT NULL,
CUSTOMERS_INFO_NUMBER_LOGONS NUMBER(10) DEFAULT NULL,
CUSTOMERS_INFO_DT_ACC_CREATED TIMESTAMP(0) DEFAULT NULL,
CUSTOMERS_INFO_DT_ACC_MODIFIED TIMESTAMP(0) DEFAULT NULL,
GLOBAL_PRODUCT_NOTIFICATIONS NUMBER(10) DEFAULT '0',
PRIMARY KEY (CUSTOMERS_INFO_ID)
) ;

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'CUSTOMERS_WISHLIST'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE CUSTOMERS_WISHLIST (
PRODUCTS_ID NUMBER(10) DEFAULT '0' NOT NULL,
CUSTOMERS_ID NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCTS_MODEL VARCHAR2(13) DEFAULT NULL,
PRODUCTS_NAME VARCHAR2(64) DEFAULT '' NOT NULL,
PRODUCTS_PRICE NUMBER(8,2) DEFAULT '0.00' NOT NULL,
FINAL_PRICE NUMBER(8,2) DEFAULT '0.00' NOT NULL,
PRODUCTS_QUANTITY NUMBER(10) DEFAULT '0' NOT NULL,
WISHLIST_NAME VARCHAR2(64) DEFAULT NULL
) ;


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'FILES_HISTORY'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE FILES_HISTORY (
MERCHANTID NUMBER(10) DEFAULT '0' NOT NULL,
FILEID NUMBER(10) NOT NULL,
FILESIZE NUMBER(10) NOT NULL,
DATE_ADDED TIMESTAMP(0) NOT NULL,
DATE_DELETED TIMESTAMP(0) DEFAULT NULL,
ACCOUNTED_DATE TIMESTAMP(0) DEFAULT NULL,
DOWNLOAD_COUNT NUMBER(10) DEFAULT '0' NOT NULL,
PRIMARY KEY (MERCHANTID,FILEID)
) ;


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'GEO_ZONES_TAX_TEMPLATE'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE GEO_ZONES_TAX_TEMPLATE (
GEO_ZONE_ID NUMBER(10) NOT NULL,
GEO_ZONE_NAME VARCHAR2(32) DEFAULT '' NOT NULL,
GEO_ZONE_DESCRIPTION VARCHAR2(255) DEFAULT '',
LAST_MODIFIED TIMESTAMP(0) DEFAULT NULL,
DATE_ADDED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
SCHEMEID NUMBER(10) DEFAULT '0' NOT NULL,
PRIMARY KEY (GEO_ZONE_ID)
) ;

-- Generate ID using sequence and trigger
CREATE SEQUENCE GEO_ZONES_TAX_TEMPLATE_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER GEO_ZONES_TAX_TEMPLATE_seq_tr
 BEFORE INSERT ON GEO_ZONES_TAX_TEMPLATE FOR EACH ROW
 WHEN (NEW.GEO_ZONE_ID IS NULL)
BEGIN
 SELECT GEO_ZONES_TAX_TEMPLATE_seq.NEXTVAL INTO :NEW.GEO_ZONE_ID FROM DUAL;
END;
/

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'LANGUAGES'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE LANGUAGES (
LANGUAGES_ID NUMBER(10) NOT NULL,
NAME VARCHAR2(32) DEFAULT '' NOT NULL,
CODE CHAR(2) DEFAULT '' NOT NULL,
IMAGE VARCHAR2(64) DEFAULT NULL,
DIRECTORY VARCHAR2(32) DEFAULT NULL,
SORT_ORDER NUMBER(10) DEFAULT NULL,
PRIMARY KEY (LANGUAGES_ID)
) ;

-- Generate ID using sequence and trigger
CREATE SEQUENCE LANGUAGES_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER LANGUAGES_seq_tr
 BEFORE INSERT ON LANGUAGES FOR EACH ROW
 WHEN (NEW.LANGUAGES_ID IS NULL)
BEGIN
 SELECT LANGUAGES_seq.NEXTVAL INTO :NEW.LANGUAGES_ID FROM DUAL;
END;
/

CREATE INDEX IDX_LANGUAGES_NAME_SM ON LANGUAGES (NAME);



-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'MANUFACTURERS'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE MANUFACTURERS (
MANUFACTURERS_ID NUMBER(10) NOT NULL,
MANUFACTURERS_NAME VARCHAR2(32) DEFAULT '' NOT NULL,
MANUFACTURERS_IMAGE VARCHAR2(64) DEFAULT NULL,
DATE_ADDED TIMESTAMP(0) DEFAULT NULL,
LAST_MODIFIED TIMESTAMP(0) DEFAULT NULL,
PRIMARY KEY (MANUFACTURERS_ID)
) ;

CREATE INDEX IDX_MFG_NAME_SM ON MANUFACTURERS (MANUFACTURERS_NAME);

--
-- SQLINES DEMO *** TABLE 'MANUFACTURERS'
--


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'MANUFACTURERS_INFO'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE MANUFACTURERS_INFO (
MANUFACTURERS_ID NUMBER(10) DEFAULT '0' NOT NULL,
LANGUAGES_ID NUMBER(10) DEFAULT '0' NOT NULL,
MANUFACTURERS_URL VARCHAR2(255) DEFAULT '' NOT NULL,
URL_CLICKED NUMBER(10) DEFAULT '0' NOT NULL,
DATE_LAST_CLICK TIMESTAMP(0) DEFAULT NULL,
PRIMARY KEY (MANUFACTURERS_ID,LANGUAGES_ID)
) ;


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'MERCHANT_CONFIGURATION'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE MERCHANT_CONFIGURATION (
CONFIGURATION_ID NUMBER(10) NOT NULL,
MERCHANT_ID NUMBER(10) NOT NULL,
CONFIGURATION_KEY VARCHAR2(255) DEFAULT '' NOT NULL,
CONFIGURATION_VALUE CLOB,
CONFIGURATION_VALUE1 CLOB,
CONFIGURATION_VALUE2 CLOB,
LAST_MODIFIED TIMESTAMP(0) DEFAULT NULL,
DATE_ADDED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
CONFIGURATION_MODULE VARCHAR2(60) DEFAULT '',
SORT_ORDER NUMBER(10) DEFAULT 0,
PRIMARY KEY (CONFIGURATION_ID)
CREATE INDEX IDX_KEY_VALUE2_MERCH ON MERCHANT_CONFIGURATION (MERCHANT_ID,CONFIGURATION_KEY(17)),
KEY IDX_KEY_VALUE1_MERCH (MERCHANT_ID),
KEY IDX_KEY_MODULE_MERCH (CONFIGURATION_MODULE)
) ENGINE=INNODB DEFAULT CHARSET=UTF8 COLLATE=UTF8_UNICODE_CI;

--
-- SQLINES DEMO *** OR TABLE 'GEO_ZONES'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE GEO_ZONES (
GEO_ZONE_ID NUMBER(10) NOT NULL,
MERCHANTID NUMBER(10) DEFAULT '0' NOT NULL,
GEO_ZONE_NAME VARCHAR2(32) DEFAULT '' NOT NULL,
GEO_ZONE_DESCRIPTION VARCHAR2(255) DEFAULT '',
LAST_MODIFIED TIMESTAMP(0) DEFAULT NULL,
DATE_ADDED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
PRIMARY KEY (GEO_ZONE_ID)
) ;

CREATE INDEX IDX_GEO_ZONES_MERCH_ID_SM ON GEO_ZONES (MERCHANTID);


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'MERCHANT_ID'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE MERCHANT_ID (
MERCHANTID NUMBER(10) NOT NULL,
DATE_ADDED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
PRIMARY KEY (MERCHANTID)
) ;


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'MERCHANT_PAYMENT_GATEWAY_TRX'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE MERCHANT_PAYMENT_GATEWAY_TRX (
MERCHANT_PAYMENT_GW_ID NUMBER(10) NOT NULL,
MERCHANTID NUMBER(10) DEFAULT '0' NOT NULL,
CUSTOMERID NUMBER(10) NOT NULL,
ORDERS_ID NUMBER(10) NOT NULL,
MERCHANT_PAYMENT_GW_METHOD VARCHAR2(50) DEFAULT '' NOT NULL,
MERCHANT_PAYMENT_GW_ORDERID VARCHAR2(100) DEFAULT '' NOT NULL,
MERCHANT_PAYMENT_GW_RESPCODE VARCHAR2(25) DEFAULT NULL,
MERCHANT_PAYMENT_GW_TRXID VARCHAR2(100) DEFAULT '' NOT NULL,
MERCHANT_PAYMENT_GW_AUTHTYPE VARCHAR2(25) DEFAULT '' NOT NULL,
MERCHANT_PAYMENT_GW_SENT CLOB NOT NULL,
MERCHANT_PAYMENT_GW_RECEIVED CLOB NOT NULL,
MERCHANT_PAYMENT_GW_SESSION VARCHAR2(255) DEFAULT '',
DATE_ADDED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
AMOUNT NUMBER(15,4) DEFAULT '0.0000' NOT NULL,
PRIMARY KEY (MERCHANT_PAYMENT_GW_ID)
) ;

CREATE INDEX IDX_PAYMENT_GATEWAY_MERCH ON MERCHANT_PAYMENT_GATEWAY_TRX (MERCHANTID);
CREATE INDEX IDX_PAYMENT_GATEWAY_TRX_CLIENT ON MERCHANT_PAYMENT_GATEWAY_TRX (MERCHANTID,CUSTOMERID);
CREATE INDEX IDX_PAYMENT_GATEWAY_TRX_GORDER ON MERCHANT_PAYMENT_GATEWAY_TRX (MERCHANTID,MERCHANT_PAYMENT_GW_ORDERID);
CREATE INDEX IDX_PAYMENT_GATEWAY_TRX_ORDER ON MERCHANT_PAYMENT_GATEWAY_TRX (MERCHANTID,ORDERS_ID);

-- SQLINES DEMO *** ---------------------------------------


--
-- SQLINES DEMO *** OR TABLE 'MERCHANT_REGISTRATION'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE MERCHANT_REGISTRATION (
MERCHANTID NUMBER(10) DEFAULT '0' NOT NULL,
MERCHANT_REGISTRATION_DEF_CODE NUMBER(10) NOT NULL,
PROMO_CODE NUMBER(10) DEFAULT '0' NOT NULL,
CC_TYPE VARCHAR2(20) DEFAULT NULL,
CC_OWNER VARCHAR2(64) DEFAULT NULL,
CC_NUMBER VARCHAR2(100) DEFAULT NULL,
CC_EXPIRES VARCHAR2(4) DEFAULT NULL,
CC_CVV BLOB,
LAST_MODIFIED TIMESTAMP(0) DEFAULT NULL,
PROMO_CODE_EXPIRY TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
DATE_ADDED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
PRIMARY KEY (MERCHANTID)
) ;

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'MERCHANT_REGISTRATION_DEF'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE MERCHANT_REGISTRATION_DEF (
MERCHANT_REG_DEF_ID NUMBER(10) NOT NULL,
MERCHANT_REG_DEF_CODE NUMBER(10) NOT NULL,
MERCHANT_REG_DEF_TYPE NUMBER(10) DEFAULT '0' NOT NULL,
MERCHANT_REG_DEF_ONE_TIME NUMBER(6,4) DEFAULT '0.0000' NOT NULL,
MERCHANT_REG_DEF_MONTHLY NUMBER(6,4) DEFAULT '0.0000' NOT NULL,
LAST_MODIFIED TIMESTAMP(0) DEFAULT NULL,
DATE_ADDED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
PRIMARY KEY (MERCHANT_REG_DEF_ID)
) ;

CREATE INDEX IDX_MERCHANT_REGISTRATION_DEF ON MERCHANT_REGISTRATION_DEF (MERCHANT_REG_DEF_CODE);

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'MERCHANT_STORE'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE MERCHANT_STORE (
MERCHANTID NUMBER(10) DEFAULT '0' NOT NULL,
STORENAME VARCHAR2(40) DEFAULT '' NOT NULL,
COUNTRY NUMBER(10) DEFAULT '223' NOT NULL,
ZONE VARCHAR2(64) NOT NULL,
STORESTATEPROVINCE VARCHAR2(64) DEFAULT '',
CURRENCY VARCHAR2(6) DEFAULT '' NOT NULL,
BGCOLORCODE NUMBER(10) DEFAULT '1',
STORELOGO VARCHAR2(255) DEFAULT '',
STOREBANNER VARCHAR2(255) DEFAULT '',
STOREPHONE VARCHAR2(15) DEFAULT '',
STOREEMAILADDRESS VARCHAR2(96) DEFAULT '',
CONTINUESHOPPINGURL VARCHAR2(100) DEFAULT '',
STOREADDRESS VARCHAR2(100) DEFAULT '',
STORECITY VARCHAR2(60) DEFAULT '',
STOREPOSTALCODE VARCHAR2(15) DEFAULT '',
SUPPORTEDLANGUAGES VARCHAR2(20) DEFAULT NULL,
WEIGHTUNITCODE CHAR(2) DEFAULT 'LB' NOT NULL,
SEIZEUNITCODE CHAR(2) DEFAULT 'IN' NOT NULL,
LAST_MODIFIED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
IN_BUSINESS_SINCE TIMESTAMP(0),
TEMPLATE_MODULE VARCHAR2(64) DEFAULT 'BASETEMPLATE',
INVOICE_MODULE VARCHAR2(64) NULL,
USE_CACHE NUMBER(3) DEFAULT '1' NOT NULL,
DEFAULTLANG CHAR(2),
DOMAINNAME VARCHAR2(255) DEFAULT 'localhost',
PRIMARY KEY (MERCHANTID)
) ;

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'TAX_RATES'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE TAX_RATES (
TAX_RATES_ID NUMBER(10) NOT NULL,
MERCHANTID NUMBER(10) DEFAULT '0' NOT NULL,
TAX_ZONE_ID NUMBER(10) DEFAULT '0' NOT NULL,
TAX_CLASS_ID NUMBER(10) DEFAULT '0' NOT NULL,
TAX_PRIORITY NUMBER(10) DEFAULT '1',
TAX_RATE NUMBER(7,4) DEFAULT '0.0000' NOT NULL,
LAST_MODIFIED TIMESTAMP(0) DEFAULT NULL,
DATE_ADDED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
PIGGYBACK NUMBER(3) DEFAULT '0',
PRIMARY KEY (TAX_RATES_ID)
) ;

CREATE INDEX IDX_MERCH_TAX_MERCH_ID_SM ON TAX_RATES (MERCHANTID);
CREATE INDEX IDX_MERCH_TAX_ZONE_ID_SM ON TAX_RATES (TAX_ZONE_ID);
CREATE INDEX IDX_MERCH_TAX_CLASS_ID_SM ON TAX_RATES (TAX_CLASS_ID);

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE TAX_RATES_DESCRIPTION (
TAX_RATES_ID NUMBER(10) NOT NULL,
LANGUAGE_ID NUMBER(10) DEFAULT '1' NOT NULL,
TAX_DESCRIPTION VARCHAR2(255) DEFAULT '' NOT NULL,
PRIMARY KEY (TAX_RATES_ID,LANGUAGE_ID)
) ;

CREATE INDEX IDX_MERCH_TAX_RATES_DESC_ID ON TAX_RATES_DESCRIPTION (TAX_RATES_ID);

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'MERCHANT_USER_INFORMATION'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE MERCHANT_USER_INFORMATION (
MERCHANT_USER_ID NUMBER(10) NOT NULL,
ADMIN_NAME VARCHAR2(32) DEFAULT '' NOT NULL,
ADMIN_EMAIL VARCHAR2(96) DEFAULT '' NOT NULL,
ADMIN_PASS VARCHAR2(40) DEFAULT '' NOT NULL,
TOKEN VARCHAR2(40) DEFAULT NULL,
USERFNAME VARCHAR2(40) DEFAULT '' NOT NULL,
USERLNAME VARCHAR2(40) DEFAULT '' NOT NULL,
USERADDRESS VARCHAR2(100) DEFAULT '' NOT NULL,
USERCITY VARCHAR2(40) DEFAULT '' NOT NULL,
USERPOSTALCODE VARCHAR2(15) DEFAULT '' NOT NULL,
USERSTATE VARCHAR2(100) DEFAULT '' NOT NULL,
USERCOUNTRYCODE NUMBER(10) NOT NULL,
USERPHONE VARCHAR2(15) DEFAULT '' NOT NULL,
USERLANG VARCHAR2(2) DEFAULT 'EN' NOT NULL,
STATUS NUMBER(10) DEFAULT '0' NOT NULL,
LAST_MODIFIED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
MERCHANTID NUMBER(10) DEFAULT '0' DEFAULT NULL,
PRIMARY KEY (MERCHANT_USER_ID),
CONSTRAINT UNQ_MERCH_INF_KEY UNIQUE (ADMIN_EMAIL)
) ;

CREATE INDEX IDX_KEY_ADMIN_NAME_MERCH ON MERCHANT_USER_INFORMATION (ADMIN_NAME);
CREATE INDEX IDX_KEY_ADMIN_PASS_MERCH ON MERCHANT_USER_INFORMATION (ADMIN_PASS);
CREATE INDEX IDX_KEY_MERCHANTID_MERCH ON MERCHANT_USER_INFORMATION (MERCHANTID);

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'MERCHANT_USER_ROLE'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE MERCHANT_USER_ROLE (
MERCHANT_USER_ROLE_ID NUMBER(10) NOT NULL,
ADMIN_NAME VARCHAR2(32) NOT NULL,
ROLE_CODE VARCHAR2(10) NOT NULL,
PRIMARY KEY (MERCHANT_USER_ROLE_ID)
) ;

CREATE INDEX IDX_KEY_ADMIN_NAME ON MERCHANT_USER_ROLE (ADMIN_NAME);

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'MERCHANT_USER_ROLE_DEF'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE MERCHANT_USER_ROLE_DEF (
ROLEID NUMBER(10) NOT NULL,
ROLE_CODE VARCHAR2(10) NOT NULL,
ROLE_DESCRIPTION VARCHAR2(255) DEFAULT NULL,
PRIMARY KEY (ROLEID)
) ;

-- Generate ID using sequence and trigger
CREATE SEQUENCE MERCHANT_USER_ROLE_DEF_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER MERCHANT_USER_ROLE_DEF_seq_tr
 BEFORE INSERT ON MERCHANT_USER_ROLE_DEF FOR EACH ROW
 WHEN (NEW.ROLEID IS NULL)
BEGIN
 SELECT MERCHANT_USER_ROLE_DEF_seq.NEXTVAL INTO :NEW.ROLEID FROM DUAL;
END;
/



-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'ZONES_TO_GEO_ZONES'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE ZONES_TO_GEO_ZONES (
ASSOCIATION_ID NUMBER(10) NOT NULL,
MERCHANTID NUMBER(10) DEFAULT '0' NOT NULL,
ZONE_COUNTRY_ID NUMBER(10) DEFAULT '0' NOT NULL,
ZONE_ID NUMBER(10) DEFAULT NULL,
GEO_ZONE_ID NUMBER(10) DEFAULT NULL,
LAST_MODIFIED TIMESTAMP(0) DEFAULT NULL,
DATE_ADDED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
PRIMARY KEY (ASSOCIATION_ID)
) ;

CREATE INDEX IDX_MERCH_ZONES_SM ON ZONES_TO_GEO_ZONES (GEO_ZONE_ID,ZONE_COUNTRY_ID,ZONE_ID,MERCHANTID);
CREATE INDEX IDX_MERCH_ZONES_MERCHANT_SM ON ZONES_TO_GEO_ZONES (MERCHANTID);


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'MODULE_CONFIGURATION'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE MODULE_CONFIGURATION (
CONFIGURATION_MODULE VARCHAR2(60) DEFAULT '' NOT NULL,
CONFIGURATION_KEY VARCHAR2(255) DEFAULT '' NOT NULL,
COUNTRY_ISO_CODE_2 CHAR(2) DEFAULT 'XX' NOT NULL,
CONFIGURATION_VALUE CLOB,
PRIMARY KEY (CONFIGURATION_MODULE,CONFIGURATION_KEY,COUNTRY_ISO_CODE_2)
) ;


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'ORDERS'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE ORDERS (
ORDERS_ID NUMBER(10) NOT NULL,
CUSTOMERS_ID NUMBER(10) DEFAULT '0' NOT NULL,
CUSTOMERS_NAME VARCHAR2(64) DEFAULT '' NOT NULL,
CUSTOMERS_COMPANY VARCHAR2(32) DEFAULT NULL,
CUSTOMERS_STREET_ADDRESS VARCHAR2(64) DEFAULT '' NOT NULL,
CUSTOMERS_SUBURB VARCHAR2(32) DEFAULT NULL,
CUSTOMERS_CITY VARCHAR2(32) DEFAULT '' NOT NULL,
CUSTOMERS_POSTCODE VARCHAR2(10) DEFAULT '' NOT NULL,
CUSTOMERS_STATE VARCHAR2(32) DEFAULT NULL,
CUSTOMERS_COUNTRY VARCHAR2(32) DEFAULT '' NOT NULL,
CUSTOMERS_TELEPHONE VARCHAR2(32) DEFAULT '' NOT NULL,
CUSTOMERS_EMAIL_ADDRESS VARCHAR2(96) DEFAULT '' NOT NULL,
CUSTOMERS_ADDRESS_FORMAT_ID NUMBER(10) DEFAULT '0',
DELIVERY_NAME VARCHAR2(64) DEFAULT '',
DELIVERY_COMPANY VARCHAR2(32) DEFAULT NULL,
DELIVERY_STREET_ADDRESS VARCHAR2(64) DEFAULT '',
DELIVERY_SUBURB VARCHAR2(32) DEFAULT NULL,
DELIVERY_CITY VARCHAR2(32) DEFAULT '',
DELIVERY_POSTCODE VARCHAR2(10) DEFAULT '',
DELIVERY_STATE VARCHAR2(32) DEFAULT NULL,
DELIVERY_COUNTRY VARCHAR2(32) DEFAULT '',
DELIVERY_ADDRESS_FORMAT_ID NUMBER(10) DEFAULT '0',
BILLING_NAME VARCHAR2(64) DEFAULT '',
BILLING_COMPANY VARCHAR2(32) DEFAULT NULL,
BILLING_STREET_ADDRESS VARCHAR2(64) DEFAULT '',
BILLING_SUBURB VARCHAR2(32) DEFAULT NULL,
BILLING_CITY VARCHAR2(32) DEFAULT '',
BILLING_POSTCODE VARCHAR2(10) DEFAULT '',
BILLING_STATE VARCHAR2(32) DEFAULT NULL,
BILLING_COUNTRY VARCHAR2(32) DEFAULT '',
BILLING_ADDRESS_FORMAT_ID NUMBER(10) DEFAULT '0',
PAYMENT_METHOD VARCHAR2(128) DEFAULT '',
PAYMENT_MODULE_CODE VARCHAR2(60) DEFAULT '',
SHIPPING_METHOD VARCHAR2(128) DEFAULT '',
SHIPPING_MODULE_CODE VARCHAR2(60) DEFAULT '',
COUPON_CODE VARCHAR2(32) DEFAULT '',
CARD_TYPE VARCHAR2(20) DEFAULT NULL,
CC_OWNER VARCHAR2(64) DEFAULT NULL,
CC_NUMBER VARCHAR2(32) DEFAULT NULL,
CC_EXPIRES VARCHAR2(4) DEFAULT NULL,
CC_CVV VARCHAR2(10) DEFAULT NULL,
LAST_MODIFIED TIMESTAMP(0) DEFAULT NULL,
DATE_PURCHASED TIMESTAMP(0) DEFAULT NULL,
ORDERS_STATUS NUMBER(10) DEFAULT '0',
ORDERS_DATE_FINISHED TIMESTAMP(0) DEFAULT NULL,
CURRENCY CHAR(3) DEFAULT NULL,
CURRENCY_VALUE NUMBER(14,6) DEFAULT NULL,
ORDER_TOTAL NUMBER(14,2) DEFAULT NULL,
ORDER_TAX NUMBER(14,2) DEFAULT NULL,
IP_ADDRESS VARCHAR2(96) DEFAULT '',
MERCHANTID NUMBER(10) DEFAULT '0',
CHANNEL NUMBER(10) DEFAULT '0',
DISPLAY_INVOICE_PAYMENTS NUMBER(3) DEFAULT '0' NOT NULL,
PRIMARY KEY (ORDERS_ID)
) ;

CREATE INDEX IDX_STATUS_ORDERS_CUST_SM ON ORDERS (ORDERS_STATUS,ORDERS_ID,CUSTOMERS_ID);
CREATE INDEX IDX_DATE_PURCHASED_SM ON ORDERS (DATE_PURCHASED);
CREATE INDEX IDX_MID_SM_ORDERS ON ORDERS (MERCHANTID);
CREATE INDEX IDX_CHANEL_SM ON ORDERS (MERCHANTID,CHANNEL);
CREATE INDEX IDX_CUST_ORDER_SM ON ORDERS (ORDERS_ID,CUSTOMERS_ID,MERCHANTID);
CREATE INDEX IDX_CUSTOMER_NAME ON ORDERS (CUSTOMERS_NAME);

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'ORDERS_PRODUCTS'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE ORDERS_PRODUCTS (
ORDERS_PRODUCTS_ID NUMBER(10) NOT NULL,
ORDERS_ID NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCTS_ID NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCTS_MODEL VARCHAR2(32) DEFAULT NULL,
PRODUCTS_NAME VARCHAR2(64) DEFAULT '' NOT NULL,
PRODUCTS_PRICE NUMBER(15,4) DEFAULT '0.0000' NOT NULL,
FINAL_PRICE NUMBER(15,4) DEFAULT '0.0000' NOT NULL,
PRODUCTS_TAX NUMBER(7,4) DEFAULT '0.0000' NOT NULL,
PRODUCTS_QUANTITY NUMBER(10) DEFAULT '0' NOT NULL,
ONETIME_CHARGES NUMBER(15,4) DEFAULT '0.0000' NOT NULL,
PRODUCT_IS_FREE NUMBER(3) DEFAULT '0' NOT NULL,
PRODUCT_SPECIAL_NEW_PRICE NUMBER(15,4) NULL,
PRODUCT_SPECIAL_DATE_AVAILABLE TIMESTAMP(0) DEFAULT NULL,
PRODUCT_SPECIAL_DATE_EXPIRE TIMESTAMP(0) DEFAULT NULL,
ORIGINAL_PRODUCT_PRICE NUMBER(15,4) DEFAULT '0.0000' NOT NULL,
SOLD_PRICE NUMBER(15,4) DEFAULT '0.0000' NOT NULL, 
PRIMARY KEY (ORDERS_PRODUCTS_ID)
) ;

CREATE INDEX IDX_ORDERS_PRD_ID_SM ON ORDERS_PRODUCTS (ORDERS_ID);
CREATE INDEX IDX_ORDERS_ID_PRODID_SM ON ORDERS_PRODUCTS (ORDERS_ID,PRODUCTS_ID);


--
-- SQLINES DEMO *** OR TABLE 'ORDERS_PRODUCTS_PRICES'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE ORDERS_PRODUCTS_PRICES (
ORDERS_PRODUCTS_PRICES NUMBER(10) NOT NULL,
ORDERS_ID NUMBER(10) DEFAULT '0' NOT NULL,
ORDERS_PRODUCTS_ID NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCT_PRICE_TYPE_ID NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCT_PRICE_MODULE_NAME VARCHAR2(64) NOT NULL,
PRODUCT_PRICE_NAME VARCHAR2(255),
PRODUCT_PRICE_AMOUNT NUMBER(15,2) NOT NULL,
DEFAULT_PRICE NUMBER(3) DEFAULT '1' NOT NULL,
PRODUCT_HAS_TAX NUMBER(3) DEFAULT '0' NOT NULL,
PRIMARY KEY (ORDERS_PRODUCTS_PRICES)
) ;

CREATE INDEX IDX_ORDERS_PRD_PR_ID_SM ON ORDERS_PRODUCTS_PRICES (ORDERS_ID);
CREATE INDEX IDX_O_PROD_PRICES_ID_SM ON ORDERS_PRODUCTS_PRICES (ORDERS_ID,ORDERS_PRODUCTS_ID);


-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE ORDERS_PRODUCTS_PRICES_SPECIAL (
ORDERS_PRODUCTS_PRICES NUMBER(10) NOT NULL,
SPECIALS_NEW_PRODUCTS_PRICE NUMBER(15,4) DEFAULT '0.0000' NOT NULL,
ORIGINAL_PRICE NUMBER(15,4) DEFAULT '0.0000' NOT NULL,
ORDERS_PRODUCTS_SPECIAL_ST_DT TIMESTAMP(0) NULL,
ORDERS_PRODUCTS_SPECIAL_END_DT TIMESTAMP(0) NULL,
ORDERS_PRODUCTS_SPECIAL_DAYS NUMBER(10) NULL, 
PRIMARY KEY (ORDERS_PRODUCTS_PRICES)
) ;



--
-- SQLINES DEMO *** OR TABLE 'ORDERS_PRODUCTS_ATTRIBUTES'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE ORDERS_PRODUCTS_ATTRIBUTES (
ORDERS_PRODUCTS_ATTRIBUTES_ID NUMBER(10) NOT NULL,
ORDERS_ID NUMBER(10) DEFAULT '0' NOT NULL,
ORDERS_PRODUCTS_ID NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCTS_OPTIONS VARCHAR2(32) DEFAULT '',
PRODUCTS_OPTIONS_VALUES VARCHAR2(256) NOT NULL,
OPTIONS_VALUES_PRICE NUMBER(15,4) DEFAULT '0.0000' NOT NULL,
PRODUCT_ATTRIBUTE_IS_FREE NUMBER(3) DEFAULT '0' NOT NULL,
PRODUCTS_ATTRIBUTES_WEIGHT NUMBER(15,4) DEFAULT '0.0000',
PRODUCTS_OPTIONS_ID NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCTS_OPTIONS_VALUES_ID NUMBER(10) DEFAULT '0' NOT NULL,
PRIMARY KEY (ORDERS_PRODUCTS_ATTRIBUTES_ID)
) ;

CREATE INDEX IDX_PROD_ID_SM ON ORDERS_PRODUCTS_ATTRIBUTES (ORDERS_PRODUCTS_ID);
CREATE INDEX IDX_ORDERS_PRD_ATTR_ID_SM ON ORDERS_PRODUCTS_ATTRIBUTES (ORDERS_ID);
CREATE INDEX IDX_O_PROD_ATTRS_ID_SM ON ORDERS_PRODUCTS_ATTRIBUTES (ORDERS_ID,ORDERS_PRODUCTS_ID);

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'ORDERS_PRODUCTS_DOWNLOAD'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE ORDERS_PRODUCTS_DOWNLOAD (
ORDERS_PRODUCTS_DOWNLOAD_ID NUMBER(10) NOT NULL,
ORDERS_ID NUMBER(10) DEFAULT '0' NOT NULL,
ORDERS_PRODUCTS_ID NUMBER(10) DEFAULT '0' NOT NULL,
ORDERS_PRODUCTS_FILENAME VARCHAR2(255) DEFAULT '' NOT NULL,
DOWNLOAD_MAXDAYS NUMBER(10) DEFAULT '0' NOT NULL,
DOWNLOAD_COUNT NUMBER(10) DEFAULT '0' NOT NULL,
FILE_ID NUMBER(10) DEFAULT '0' NOT NULL,
PRIMARY KEY (ORDERS_PRODUCTS_DOWNLOAD_ID)
) ;

CREATE INDEX IDX_ORDERS_PRD_DWL_ID_SM ON ORDERS_PRODUCTS_DOWNLOAD (ORDERS_ID);
CREATE INDEX IDX_ORDERS_PRODUCTS_ID_SM ON ORDERS_PRODUCTS_DOWNLOAD (ORDERS_PRODUCTS_ID);
CREATE INDEX IDX_FILE_ID ON ORDERS_PRODUCTS_DOWNLOAD (FILE_ID);

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'ORDERS_STATUS'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE ORDERS_STATUS (
ORDERS_STATUS_ID NUMBER(10) DEFAULT '0' NOT NULL,
LANGUAGE_ID NUMBER(10) DEFAULT '1' NOT NULL,
ORDERS_STATUS_NAME VARCHAR2(32) DEFAULT '' NOT NULL,
PRIMARY KEY (ORDERS_STATUS_ID,LANGUAGE_ID)
) ;

CREATE INDEX IDX_ORDERS_STATUS_NAME_SM ON ORDERS_STATUS (ORDERS_STATUS_NAME);

-- SQLINES DEMO *** ---------------------------------------


-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE ORDERS_STATUS_HISTORY (
ORDERS_STATUS_HISTORY_ID NUMBER(10) NOT NULL,
ORDERS_ID NUMBER(10) DEFAULT '0' NOT NULL,
ORDERS_STATUS_ID NUMBER(10) DEFAULT '0' NOT NULL,
DATE_ADDED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF') NOT NULL,
CUSTOMER_NOTIFIED NUMBER(10) DEFAULT '0',
COMMENTS CLOB,
PRIMARY KEY (ORDERS_STATUS_HISTORY_ID)
) ;

CREATE INDEX IDX_ORDERS_STAT_HIST_ID_SM ON ORDERS_STATUS_HISTORY (ORDERS_ID);
CREATE INDEX IDX_ORDERS_ID_STATUS_ID_SM ON ORDERS_STATUS_HISTORY (ORDERS_ID,ORDERS_STATUS_ID);


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'ORDERS_TOTAL'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE ORDERS_TOTAL (
ORDERS_TOTAL_ID NUMBER(10) NOT NULL,
ORDERS_ID NUMBER(10) DEFAULT '0' NOT NULL,
TITLE VARCHAR2(255) DEFAULT '' NOT NULL,
TEXT VARCHAR2(255) DEFAULT '' NOT NULL,
VALUE NUMBER(15,4) DEFAULT '0.0000' NOT NULL,
MODULE VARCHAR2(50) DEFAULT '' NOT NULL,
SORT_ORDER NUMBER(10) DEFAULT '0' NOT NULL,
PRIMARY KEY (ORDERS_TOTAL_ID)
) ;

CREATE INDEX IDX_OT_ORDERS_ID_SM ON ORDERS_TOTAL (ORDERS_ID);
CREATE INDEX IDX_OT_MODULE_SM ON ORDERS_TOTAL (MODULE);

-- SQLINES DEMO *** ---------------------------------------


--
-- SQLINES DEMO *** OR TABLE 'OFFSYSTEM_PENDING_ORDERS'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE OFFSYSTEM_PENDING_ORDERS (
OFFSYSTEM_PENDING_ORDER_ID NUMBER(10) NOT NULL,
DATE_ADDED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF') NOT NULL,
PAYER_EMAIL VARCHAR2(100) DEFAULT '' NOT NULL,
TRANSACTION_ID VARCHAR2(100) DEFAULT '',
ORDER_ID NUMBER(10) DEFAULT '0' NOT NULL,
OFFSYSTEM_MODULE VARCHAR2(255) DEFAULT '',
MERCHANT_ID NUMBER(10) DEFAULT '0',
PRIMARY KEY (OFFSYSTEM_PENDING_ORDER_ID)
) ;

CREATE INDEX IDX_OFFSYSTEM_PENDING_MID ON OFFSYSTEM_PENDING_ORDERS (MERCHANT_ID);
CREATE INDEX IDX_OFFSYSTEM_PENDING_PPK ON OFFSYSTEM_PENDING_ORDERS (TRANSACTION_ID,PAYER_EMAIL);

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'OFFSYSTEM_NOTIFICATION_ORDERS'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE OFFSYSTEM_NOTIFICATION_ORDERS (
OFFSYSTEM_NOTIF_ORDER_ID NUMBER(10) NOT NULL,
OFFSYSTEM_PENDING_ORDER_ID NUMBER(10) CHECK (OFFSYSTEM_PENDING_ORDER_ID > 0) NOT NULL,
PAYER_EMAIL VARCHAR2(255) DEFAULT '' NOT NULL,
DATE_RECEIVED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF') NOT NULL,
OFFSYSTEM_MODULE VARCHAR2(255) DEFAULT '' NOT NULL,
MERCHANT_ID NUMBER(10) DEFAULT '0',
OFFSYSTEM_STATUS NUMBER(10) DEFAULT '0',
OFFSYSTEM_DETAILS CLOB,
PRIMARY KEY (OFFSYSTEM_NOTIF_ORDER_ID)
) ;

CREATE INDEX IDX_OFFSYSTEM_NOTIFICATION_MID ON OFFSYSTEM_NOTIFICATION_ORDERS (MERCHANT_ID);

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'PRODUCTS'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE PRODUCTS (
PRODUCTS_ID NUMBER(10) NOT NULL,
PRODUCTS_TYPE NUMBER(10) DEFAULT '1' NOT NULL,
PRODUCTS_QUANTITY NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCTS_MODEL VARCHAR2(32) DEFAULT NULL,
PRODUCTS_IMAGE VARCHAR2(64) DEFAULT NULL,
PRODUCTS_PRICE NUMBER(15,4) DEFAULT '0.0000' NOT NULL,
PRODUCTS_VIRTUAL NUMBER(3) DEFAULT '0',
PRODUCTS_DATE_ADDED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF') NOT NULL,
PRODUCTS_LAST_MODIFIED TIMESTAMP(0) DEFAULT NULL,
PRODUCTS_DATE_AVAILABLE TIMESTAMP(0) DEFAULT NULL,
PRODUCTS_WEIGHT NUMBER(15,4) DEFAULT '0.0000' NOT NULL,
PRODUCTS_STATUS NUMBER(3) DEFAULT '0',
PRODUCTS_FEATURED NUMBER(3) DEFAULT '0',
PRODUCTS_TAX_CLASS_ID NUMBER(10) DEFAULT '0' NOT NULL,
MANUFACTURERS_ID NUMBER(10) DEFAULT NULL,
PRODUCTS_ORDERED NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCTS_QUANTITY_ORDER_MIN NUMBER(10) DEFAULT '1' NOT NULL,
PRODUCTS_QUANTITY_ORDER_UNITS NUMBER(10) DEFAULT '1' NOT NULL,
PRODUCT_IS_FREE NUMBER(3) DEFAULT '0',
PRODUCT_IS_CALL NUMBER(3) DEFAULT '0',
PRODUCT_IS_ALWAYS_FREE_SHP NUMBER(3) DEFAULT '0',
PRODUCTS_QUANTITY_ORDER_MAX NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCTS_SORT_ORDER NUMBER(10) DEFAULT '0' NOT NULL,
MASTER_CATEGORIES_ID NUMBER(10) DEFAULT '0' NOT NULL,
MERCHANTID NUMBER(10) DEFAULT '0',
PRODUCTS_LENGTH NUMBER(15,4) DEFAULT '0.0000' NOT NULL,
PRODUCTS_WIDTH NUMBER(15,4) DEFAULT '0.0000' NOT NULL,
PRODUCTS_HEIGHT NUMBER(15,4) DEFAULT '0.0000' NOT NULL,
ASIN VARCHAR2(256) DEFAULT NULL,
UPC VARCHAR2(256) DEFAULT NULL,
SKU VARCHAR2(256) DEFAULT NULL,
EAN VARCHAR2(256) DEFAULT NULL,
ISBN VARCHAR2(256) DEFAULT NULL,
PRODUCTS_IMAGE_LARGE VARCHAR2(64) DEFAULT NULL,
PRODUCTS_IMAGE_CROP NUMBER(3) DEFAULT '0',
PRIMARY KEY (PRODUCTS_ID),
PRODUCTS_EXTERNAL_DL VARCHAR2(120) NULL,
PRODUCTS_IMAGE_1 VARCHAR2(64) DEFAULT NULL,
PRODUCTS_IMAGE_2 VARCHAR2(64) DEFAULT NULL,
PRODUCTS_IMAGE_3 VARCHAR2(64) DEFAULT NULL,
PRODUCTS_IMAGE_4 VARCHAR2(64) DEFAULT NULL,
PRODUCT_REVIEW_AVG NUMBER(5,1) NULL,
PRODUCT_REVIEW_COUNT NUMBER(10) DEFAULT 0
) ;

CREATE INDEX IDX_PRODUCTS_DATE_ADDED_SM ON PRODUCTS (PRODUCTS_DATE_ADDED);
CREATE INDEX IDX_PRODUCTS_STATUS_SM ON PRODUCTS (PRODUCTS_STATUS);
CREATE INDEX IDX_PRODUCTS_DATE_AVAILABLE_SM ON PRODUCTS (PRODUCTS_DATE_AVAILABLE);
CREATE INDEX IDX_PRODUCTS_ORDERED_SM ON PRODUCTS (PRODUCTS_ORDERED);
CREATE INDEX IDX_PRODUCTS_MODEL_SM ON PRODUCTS (PRODUCTS_MODEL);
CREATE INDEX IDX_PRODUCTS_FEATURED_SM ON PRODUCTS (PRODUCTS_FEATURED);
CREATE INDEX IDX_MASTER_CATEGORIES_ID_SM ON PRODUCTS (MASTER_CATEGORIES_ID);
CREATE INDEX IDX_PRODUCTS_SORT_ORDER_SM ON PRODUCTS (PRODUCTS_SORT_ORDER);
CREATE INDEX IDX_MANUFACTURERS_ID_SM ON PRODUCTS (MANUFACTURERS_ID);
CREATE INDEX IDX_MERCHANT_PRODUCTS_SM ON PRODUCTS (MERCHANTID);
CREATE INDEX IDX_PRODUCTS_TAXCLASS_SM ON PRODUCTS (PRODUCTS_TAX_CLASS_ID);


--
-- SQLINES DEMO *** OR TABLE 'PRODUCT_RELATIONSHIP'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE PRODUCT_RELATIONSHIP (
RELATIONSHIP_ID NUMBER(10) NOT NULL,
MERCHANT_ID NUMBER(10) NOT NULL,
PRODUCT_ID NUMBER(10) NOT NULL,
RELATED_PRODUCT_ID NUMBER(10) NOT NULL,
RELATIONSHIP_TYPE NUMBER(10) DEFAULT '1' NOT NULL,
RELATIONSHIP_ACTIVE NUMBER(3) DEFAULT '1',
PRIMARY KEY (RELATIONSHIP_ID)
) ;

CREATE INDEX IDX_RELATIONSHIP_PRODUCT ON PRODUCT_RELATIONSHIP (MERCHANT_ID,PRODUCT_ID);
CREATE INDEX IDX_RELATIONSHIP_TYPE ON PRODUCT_RELATIONSHIP (MERCHANT_ID,RELATIONSHIP_TYPE);
CREATE INDEX IDX_RELATIONSHIP_LINE ON PRODUCT_RELATIONSHIP (PRODUCT_ID,RELATED_PRODUCT_ID,MERCHANT_ID,RELATIONSHIP_TYPE);




--
-- SQLINES DEMO *** OR TABLE 'PRODUCTS_ATTRIBUTES'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE PRODUCTS_ATTRIBUTES (
PRODUCTS_ATTRIBUTES_ID NUMBER(10) NOT NULL,
PRODUCTS_ID NUMBER(10) DEFAULT '0' NOT NULL,
OPTIONS_ID NUMBER(10) DEFAULT '0' NOT NULL,
OPTIONS_VALUES_ID NUMBER(10) DEFAULT '0' NOT NULL,
OPTIONS_VALUES_PRICE NUMBER(15,4) DEFAULT '0.0000' NOT NULL,
PRODUCTS_OPTIONS_SORT_ORDER NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCT_ATTRIBUTE_IS_FREE NUMBER(3) DEFAULT '0',
PRODUCTS_ATTRIBUTES_WEIGHT NUMBER(15,4) DEFAULT '0.0000' NOT NULL,
ATTRIBUTES_DEFAULT NUMBER(3) DEFAULT '0',
ATTRIBUTES_DISPLAY_ONLY NUMBER(3) DEFAULT '0',
ATTRIBUTES_DISCOUNTED NUMBER(3) DEFAULT '0',
ATTRIBUTES_REQUIRED NUMBER(3) DEFAULT '0',
PRIMARY KEY (PRODUCTS_ATTRIBUTES_ID)
) ;

CREATE INDEX IDX_ID_OPTIONS_ID_VALUES_SM ON PRODUCTS_ATTRIBUTES (PRODUCTS_ID,OPTIONS_ID,OPTIONS_VALUES_ID);
CREATE INDEX IDX_PRD_ID_ATTRS_SM ON PRODUCTS_ATTRIBUTES (PRODUCTS_ID);

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'PRODUCTS_ATTRIBUTES_DOWNLOAD'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE PRODUCTS_ATTRIBUTES_DOWNLOAD (
PRODUCTS_ATTRIBUTES_ID NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCTS_ATTRIBUTES_FILENAME VARCHAR2(255) DEFAULT '' NOT NULL,
PRODUCTS_ATTRIBUTES_MAXDAYS NUMBER(10) DEFAULT '0',
PRODUCTS_ATTRIBUTES_MAXCOUNT NUMBER(10) DEFAULT '0',
PRIMARY KEY (PRODUCTS_ATTRIBUTES_ID)
) ;

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'PRODUCTS_DESCRIPTION'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE PRODUCTS_DESCRIPTION (
PRODUCTS_ID NUMBER(10) NOT NULL,
LANGUAGE_ID NUMBER(10) DEFAULT '1' NOT NULL,
PRODUCTS_NAME VARCHAR2(255) DEFAULT NULL,
PRODUCTS_DESCRIPTION CLOB,
PRODUCTS_URL VARCHAR2(255) DEFAULT NULL,
PRODUCTS_VIEWED NUMBER(10) DEFAULT '0',
PRODUCTS_HIGHLIGHT VARCHAR2(255) DEFAULT NULL,
SE_URL_SRC VARCHAR2(100) NULL,
SE_URL VARCHAR2(100) NULL,
METATAG_TITLE VARCHAR2(255) DEFAULT '' NULL,
METATAG_KEYWORDS CLOB NULL,
METATAG_DESCRIPTION CLOB NULL,
PRODUCTS_EXTERNAL_DL VARCHAR2(120) NULL,
PRODUCTS_TITLE VARCHAR2(120) NULL,
PRIMARY KEY (PRODUCTS_ID,LANGUAGE_ID)
) ;

CREATE INDEX IDX_PRODUCTS_NAME_SM ON PRODUCTS_DESCRIPTION (PRODUCTS_NAME);
CREATE INDEX IDX_PRD_ID_DESC_SM ON PRODUCTS_DESCRIPTION (PRODUCTS_ID);
CREATE INDEX IDX_PRODUCTS_SE_SM ON PRODUCTS_DESCRIPTION (SE_URL);

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'PRODUCTS_NOTIFICATIONS'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE PRODUCTS_NOTIFICATIONS (
PRODUCTS_ID NUMBER(10) DEFAULT '0' NOT NULL,
CUSTOMERS_ID NUMBER(10) DEFAULT '0' NOT NULL,
DATE_ADDED TIMESTAMP(0)  DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
PRIMARY KEY (PRODUCTS_ID,CUSTOMERS_ID)
) ;

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'PRODUCTS_OPTIONS'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE PRODUCTS_OPTIONS (
PRODUCTS_OPTIONS_ID NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCTS_OPTIONS_SORT_ORDER NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCTS_OPTIONS_TYPE NUMBER(10) DEFAULT '0' NOT NULL,
MERCHANTID NUMBER(10) DEFAULT '0',
PRIMARY KEY (PRODUCTS_OPTIONS_ID)
) ;

CREATE INDEX IDX_MID_SM_OPTIONS ON PRODUCTS_OPTIONS (MERCHANTID);
CREATE INDEX IDX_PRDOPT_SORT_ORDER_SM ON PRODUCTS_OPTIONS (PRODUCTS_OPTIONS_SORT_ORDER);




-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE PRODUCTS_OPTIONS_DESCRIPTION (
PRODUCTS_OPTIONS_ID NUMBER(10) DEFAULT '0' NOT NULL,
LANGUAGE_ID NUMBER(10) DEFAULT '1' NOT NULL,
PRODUCTS_OPTIONS_NAME VARCHAR2(32) DEFAULT '' NOT NULL,
PRODUCTS_OPTIONS_COMMENT VARCHAR2(64) DEFAULT NULL,
PRIMARY KEY (PRODUCTS_OPTIONS_ID,LANGUAGE_ID)
) ;

CREATE INDEX IDX_PRD_OPT_DESC_ID_SM ON PRODUCTS_OPTIONS_DESCRIPTION (PRODUCTS_OPTIONS_ID);
CREATE INDEX IDX_PRODUCTS_OPTIONS_NAME_SM ON PRODUCTS_OPTIONS_DESCRIPTION (PRODUCTS_OPTIONS_NAME);



--
-- SQLINES DEMO *** OR TABLE 'PRODUCTS_OPTIONS_TYPES'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE PRODUCTS_OPTIONS_TYPES (
PRODUCTS_OPTIONS_TYPES_ID NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCTS_OPTIONS_TYPES_NAME VARCHAR2(32) DEFAULT NULL,
PRIMARY KEY (PRODUCTS_OPTIONS_TYPES_ID)
)  ;

COMMENT ON TABLE PRODUCTS_OPTIONS_TYPES IS 'TRACK PRODUCTS_OPTIONS_TYPES'


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'PRODUCTS_OPTIONS_VALUES'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE PRODUCTS_OPTIONS_VALUES (
PRODUCTS_OPTIONS_VALUES_ID NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCTS_OPTIONS_VALUES_SORT_O NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCTS_OPTIONS_VALUES_IMAGE VARCHAR2(64) DEFAULT NULL,
MERCHANTID NUMBER(10) DEFAULT '0',
PRIMARY KEY (PRODUCTS_OPTIONS_VALUES_ID)
) ;

CREATE INDEX IDX_MID_SM_OPTVAL ON PRODUCTS_OPTIONS_VALUES (MERCHANTID);
CREATE INDEX IDX_PRD_OPT_VAL_S_ORDER_SM ON PRODUCTS_OPTIONS_VALUES (PRODUCTS_OPTIONS_VALUES_SORT_O);




-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE PRODUCTS_OPTIONS_VALUES_DESC (
PRODUCTS_OPTIONS_VALUES_ID NUMBER(10) DEFAULT '0' NOT NULL,
LANGUAGE_ID NUMBER(10) DEFAULT '1' NOT NULL,
PRODUCTS_OPTIONS_VALUES_NAME VARCHAR2(64) DEFAULT '' NOT NULL,
PRIMARY KEY (PRODUCTS_OPTIONS_VALUES_ID,LANGUAGE_ID)
) ;

CREATE INDEX IDX_PRD_OPT_VALUES_NAME_SM ON PRODUCTS_OPTIONS_VALUES_DESC (PRODUCTS_OPTIONS_VALUES_NAME);
CREATE INDEX IDX_PRD_OPT_VALUES_ID_SM ON PRODUCTS_OPTIONS_VALUES_DESC (PRODUCTS_OPTIONS_VALUES_ID);



-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'PRODUCTS_OPTIONS_VAL_PRD_OPTS'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE PRODUCTS_OPTIONS_VAL_PRD_OPTS (
PRODUCTS_OPTIONS_ID NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCTS_OPTIONS_VALUES_ID NUMBER(10) DEFAULT '0' NOT NULL,
PRIMARY KEY (PRODUCTS_OPTIONS_ID,PRODUCTS_OPTIONS_VALUES_ID)
) ;

CREATE INDEX IDX_PRD_OPTID_SM ON PRODUCTS_OPTIONS_VAL_PRD_OPTS (PRODUCTS_OPTIONS_ID);
CREATE INDEX IDX_PRD_OPTIONS_VAL_ID_SM ON PRODUCTS_OPTIONS_VAL_PRD_OPTS (PRODUCTS_OPTIONS_VALUES_ID);



--
-- SQLINES DEMO *** OR TABLE 'PRODUCTS_TO_CATEGORIES'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE PRODUCTS_TO_CATEGORIES (
PRODUCTS_ID NUMBER(10) DEFAULT '0' NOT NULL,
CATEGORIES_ID NUMBER(10) DEFAULT '0' NOT NULL,
PRIMARY KEY (PRODUCTS_ID,CATEGORIES_ID)
) ;

CREATE INDEX IDX_CAT_PROD_ID_SM ON PRODUCTS_TO_CATEGORIES (CATEGORIES_ID,PRODUCTS_ID);


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'PRODUCT_TYPES'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE PRODUCT_TYPES (
TYPE_ID NUMBER(10) NOT NULL,
TYPE_NAME VARCHAR2(255) DEFAULT '' NOT NULL,
TYPE_HANDLER VARCHAR2(255) DEFAULT '' NOT NULL,
TYPE_MASTER_TYPE NUMBER(10) DEFAULT '1' NOT NULL,
ALLOW_ADD_TO_CART CHAR(1) DEFAULT 'Y' NOT NULL,
DEFAULT_IMAGE VARCHAR2(255) DEFAULT '',
DATE_ADDED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
LAST_MODIFIED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
PRIMARY KEY (TYPE_ID)
) ;

-- Generate ID using sequence and trigger
CREATE SEQUENCE PRODUCT_TYPES_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER PRODUCT_TYPES_seq_tr
 BEFORE INSERT ON PRODUCT_TYPES FOR EACH ROW
 WHEN (NEW.TYPE_ID IS NULL)
BEGIN
 SELECT PRODUCT_TYPES_seq.NEXTVAL INTO :NEW.TYPE_ID FROM DUAL;
END;
/

CREATE INDEX IDX_TYPE_MASTER_TYPE_SM ON PRODUCT_TYPES (TYPE_MASTER_TYPE);

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'REVIEWS'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE REVIEWS (
REVIEWS_ID NUMBER(10) NOT NULL,
PRODUCTS_ID NUMBER(10) DEFAULT '0' NOT NULL,
CUSTOMERS_ID NUMBER(10) DEFAULT NULL,
CUSTOMERS_NAME VARCHAR2(64) DEFAULT '' NOT NULL,
REVIEWS_RATING NUMBER(10) DEFAULT NULL,
DATE_ADDED TIMESTAMP(0) DEFAULT NULL,
LAST_MODIFIED TIMESTAMP(0) DEFAULT NULL,
REVIEWS_READ NUMBER(10) DEFAULT '0',
STATUS NUMBER(10) DEFAULT '1',
PRIMARY KEY (REVIEWS_ID)
) ;

CREATE INDEX IDX_PRD_ID_REV_SM ON REVIEWS (PRODUCTS_ID);
CREATE INDEX IDX_CUST_ID_REV_SM ON REVIEWS (CUSTOMERS_ID);
CREATE INDEX IDX_STATUS_REV_SM ON REVIEWS (STATUS);
CREATE INDEX IDX_DATE_ADDED_SM ON REVIEWS (DATE_ADDED);


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'REVIEWS_DESCRIPTION'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE REVIEWS_DESCRIPTION (
REVIEWS_ID NUMBER(10) DEFAULT '0' NOT NULL,
LANGUAGES_ID NUMBER(10) DEFAULT '0' NOT NULL,
REVIEWS_TEXT CLOB NOT NULL,
PRIMARY KEY (REVIEWS_ID,LANGUAGES_ID)
) ;


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'EVENT_TYPE'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE EVENT_TYPE (
EVENT_TYPE_ID NUMBER(10) DEFAULT '0' NOT NULL,
EVENT_TYPE_MODULE VARCHAR2(60) DEFAULT '',
EVENT_APPLY_TO_ALL_USERS NUMBER(3) DEFAULT '1',
EVENT_HAS_NOTIFICATION NUMBER(3) DEFAULT '0',
PRIMARY KEY (EVENT_TYPE_ID)
) ;

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'EVENT_TYPE_ENTITY_TYPE'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE EVENT_TYPE_ENTITY_TYPE (
EVENT_TYPE_ID NUMBER(10) DEFAULT '0' NOT NULL,
ENTITY_TYPE VARCHAR2(60) DEFAULT '' NOT NULL,
PRIMARY KEY (EVENT_TYPE_ID)
) ;

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'EVENT'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE EVENT (
EVENT_ID NUMBER(10) DEFAULT '0' NOT NULL,
EVENT_TYPE_ID NUMBER(10) DEFAULT '0' NOT NULL,
MERCHANT_ID NUMBER(10) DEFAULT '0' NOT NULL,
PRIMARY KEY (EVENT_ID)
) ;

CREATE INDEX IDX_EVENT_TYPE ON EVENT (EVENT_TYPE_ID);
CREATE INDEX IDX_EVENT_MERCHANT ON EVENT (MERCHANT_ID);


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'EVENT_NOTIFICATION'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE EVENT_NOTIFICATION (
EVENT_NOTIFICATION_ID NUMBER(10) DEFAULT '0' NOT NULL,
EVENT_ID NUMBER(10) DEFAULT '0' NOT NULL,
EVENT_NAME VARCHAR2(255) DEFAULT '' NOT NULL,
EVENT_TITLE VARCHAR2(255) DEFAULT '' NOT NULL,
EVENT_TEXT CLOB DEFAULT '' NOT NULL,
EVENT_NOTIF_SCHEDULE_DAY NUMBER(10) NULL,
EVENT_NOTIF_SCHEDULE_TIME NUMBER(10) NULL ,
EVENT_NOTIF_FREQUENCE VARCHAR2(20) NULL ,
EVENT_NOTIF_DATE TIMESTAMP(0) DEFAULT NULL,
EVENT_NOTIF_DATE_TIME NUMBER(10) NULL ,
EVENT_NOTIF_SUBSC_ADDDAYS VARCHAR2(3) NULL ,
PRIMARY KEY (EVENT_NOTIFICATION_ID)
) ;

CREATE INDEX IDX_EVENT_NOTIF ON EVENT_NOTIFICATION (EVENT_ID);


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'EVENT_ENTITY_TRIGGER'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE EVENT_ENTITY_TRIGGER (
EVENT_ENTITY_TRIGGER_ID NUMBER(10) DEFAULT '0' NOT NULL,
EVENT_ID NUMBER(10) DEFAULT '0' NOT NULL,
ENTITY_ID NUMBER(10) DEFAULT '0' NOT NULL,
EVENT_TYPE VARCHAR2(60) DEFAULT '' NOT NULL,
PRIMARY KEY (EVENT_ENTITY_TRIGGER_ID)
) ;

CREATE INDEX IDX_EVENT_TRIGGER ON EVENT_ENTITY_TRIGGER (EVENT_ID);

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'EVENT_SUBSCRIBTION'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE EVENT_SUBSCRIBTION (
EVENT_SUBSCRIBTION_ID NUMBER(10) DEFAULT '0' NOT NULL,
EVENT_ID NUMBER(10) DEFAULT '0' NOT NULL,
CUSTOMER_ID NUMBER(10) DEFAULT '0' NOT NULL,
OPTIN_FLAG NUMBER(3) DEFAULT '0',
PRIMARY KEY (EVENT_SUBSCRIBTION_ID)
) ;

CREATE INDEX IDX_EVENT_SUBSCR ON EVENT_SUBSCRIBTION (EVENT_ID);


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'SPECIALS'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE SPECIALS (
SPECIAL_ID NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCTS_ID NUMBER(10) DEFAULT '0' NOT NULL,
SPECIALS_NEW_PRODUCTS_PRICE NUMBER(15,4) DEFAULT '0.0000' NOT NULL,
SPECIALS_DATE_ADDED TIMESTAMP(0) DEFAULT NULL,
SPECIALS_LAST_MODIFIED TIMESTAMP(0) DEFAULT NULL,
EXPIRES_DATE DATE DEFAULT '0001-01-01',
DATE_STATUS_CHANGE TIMESTAMP(0) DEFAULT NULL,
STATUS NUMBER(10) DEFAULT '1',
SPECIALS_DATE_AVAILABLE DATE DEFAULT '0001-01-01',
PRIMARY KEY (SPECIAL_ID)
) ;

CREATE INDEX IDX_SPECIAL_PRODUCT_SM ON SPECIALS (PRODUCTS_ID);
CREATE INDEX IDX_STATUS_SPEC_SM ON SPECIALS (STATUS);
CREATE INDEX IDX_DATE_AVAIL_SM ON SPECIALS (SPECIALS_DATE_AVAILABLE);
CREATE INDEX IDX_EXPIRES_DATE_SM ON SPECIALS (EXPIRES_DATE);

-- SQLINES DEMO *** ---------------------------------------

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE PRODUCTS_PRICE (
PRODUCT_PRICE_ID NUMBER(10) NOT NULL,
PRODUCT_ID NUMBER(10) NOT NULL,
PRODUCT_PRICE_TYPE_ID NUMBER(10) DEFAULT '0' NOT NULL,
PRODUCT_PRICE_MODULE_NAME VARCHAR2(64) NOT NULL,
PRODUCT_PRICE_AMOUNT NUMBER(15,2) NOT NULL,
DEFAULT_PRICE NUMBER(3) DEFAULT '1',
PRIMARY KEY (PRODUCT_PRICE_ID)
) ;

CREATE INDEX SM_IDX_PRD_PRICE_PRD_ID ON PRODUCTS_PRICE (PRODUCT_ID);




-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE PRODUCTS_PRICE_DESCRIPTION (
PRODUCT_PRICE_ID NUMBER(10) NOT NULL,
LANGUAGE_ID NUMBER(10) DEFAULT '1' NOT NULL,
PRODUCT_PRICE_NAME VARCHAR2(255) DEFAULT NULL,
PRIMARY KEY (PRODUCT_PRICE_ID,LANGUAGE_ID)
) ;



-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE PRODUCTS_PRICE_SPECIALS (
PRODUCT_PRICE_ID NUMBER(10) NOT NULL,
PRODUCT_PRICE_SPECIAL_ST_DATE TIMESTAMP(0) NULL,
PRODUCT_PRICE_SPECIAL_END_DATE TIMESTAMP(0) NULL,
PRODUCT_PRICE_SPECIAL_DAYS NUMBER(10) NULL, 
PRODUCT_PRICE_SPECIAL_AMOUNT NUMBER(15,2) NOT NULL, 
PRIMARY KEY (PRODUCT_PRICE_ID)
) ;


-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE ORDERS_ACCOUNT (
ORDER_ACCOUNT_ID NUMBER(10) NOT NULL,
ORDER_ID NUMBER(10) NOT NULL,
ORDER_ACCOUNT_STATUS_ID NUMBER(10) NOT NULL,
ORDER_ACCOUNT_START_DATE TIMESTAMP(0) NOT NULL,
ORDER_ACCOUNT_END_DATE TIMESTAMP(0) NULL,
ORDER_ACCOUNT_BILL_DAY NUMBER(10) DEFAULT 0 NOT NULL, 
PRIMARY KEY (ORDER_ACCOUNT_ID)
) ;

CREATE INDEX SM_IDX_ORDER_ID ON ORDERS_ACCOUNT (ORDER_ID);
CREATE INDEX SM_IDX_ORDER_ACCOUNT_STATUS ON ORDERS_ACCOUNT (ORDER_ACCOUNT_STATUS_ID);

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE ORDERS_ACCOUNT_STATUS_HISTORY (
ORDER_ACCNT_STAT_HISTORY_ID NUMBER(10) NOT NULL,
ORDER_ACCOUNT_ID NUMBER(10) NOT NULL,
ORDER_ACCNT_STAT_ID NUMBER(10) DEFAULT '0' NOT NULL,
ORDER_ACCNT_STAT_HISTORY_NAME VARCHAR2(32) NOT NULL,
DATE_ADDED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF') NOT NULL,
CUSTOMER_NOTIFIED NUMBER(10) DEFAULT '0',
COMMENTS CLOB,
PRIMARY KEY (ORDER_ACCNT_STAT_HISTORY_ID)
) ;

CREATE INDEX SM_IDX_ORDER_ACCOUNT_ID ON ORDERS_ACCOUNT_STATUS_HISTORY (ORDER_ACCOUNT_ID);



-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE ORDERS_ACCNT_TRX_HISTORY (
ORDER_ACCNT_TRX_HISTORY_ID NUMBER(10) NOT NULL,
ORDER_ACCOUNT_ID NUMBER(10) NOT NULL,
ORDER_ACCNT_TRX_DATE TIMESTAMP(0) NOT NULL,
ORDER_ACCNT_TRX_AMOUNT NUMBER(15,2) NOT NULL,
ORDER_ACCNT_TRX_STATUS NUMBER(10) NOT NULL,
ORDER_ACCNT_TRX_STATUS_TEXT VARCHAR2(255) NOT NULL, 
PRIMARY KEY (ORDER_ACCNT_TRX_HISTORY_ID)
) ;

CREATE INDEX SM_IDX_ORDER_ACCNT_TRX_ID ON ORDERS_ACCNT_TRX_HISTORY (ORDER_ACCOUNT_ID);


-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE ORDERS_ACCOUNT_PRODUCTS (
ORDER_ACCOUNT_PRODUCT_ID NUMBER(10) NOT NULL,
ORDER_ACCOUNT_ID NUMBER(10) NOT NULL,
ORDER_PRODUCT_ID NUMBER(10) DEFAULT '0' NOT NULL,
ORDER_ACCOUNT_PRODUCT_ST_DT TIMESTAMP(0) NOT NULL,
ORDER_ACCOUNT_PRODUCT_END_DT TIMESTAMP(0) NULL,
ORDER_ACCOUNT_PRODUCT_EOT TIMESTAMP(0) NULL,
ORDER_ACCOUNT_PRODUCT_ACCNT_DT TIMESTAMP(0) NULL, 
ORDER_ACCOUNT_PRODUCT_L_ST_DT TIMESTAMP(0) NULL,
ORDER_ACCOUNT_PRODUCT_L_TRX_ST NUMBER(10) DEFAULT '-1' NOT NULL,
ORDER_ACCOUNT_PRODUCT_PM_FR_TY NUMBER(10) DEFAULT '1' NOT NULL,
ORDER_ACCOUNT_PRODUCT_STATUS NUMBER(10) DEFAULT '0' NOT NULL, 
PRIMARY KEY (ORDER_ACCOUNT_PRODUCT_ID)
) ;

CREATE INDEX IDX_ORDER_ACCOUNT_ID_SM ON ORDERS_ACCOUNT_PRODUCTS (ORDER_ACCOUNT_ID);


-- SQLINES DEMO *** ---------------------------------------
--
-- PORTLET
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE PORTLET (
PORTLET_ID NUMBER(10) NOT NULL,
MERCHANT_ID NUMBER(10) NOT NULL,
PAGE NUMBER(10) NOT NULL,
TITLE VARCHAR2(60) NOT NULL,
NAME VARCHAR2(100) NULL,
PORTLET_TYPE NUMBER(10) DEFAULT 0,
LABEL_ID NUMBER(10) NOT NULL,
VISIBLE NUMBER(3) DEFAULT '0',
ENABLED NUMBER(3) DEFAULT '1',  
SORT_ORDER NUMBER(10) DEFAULT 0,
COLUMN_ID VARCHAR2(20) NOT NULL, 
PRIMARY KEY (PORTLET_ID)
) ;

CREATE INDEX IDX_PORTLET_MERCHANT_ID_SM ON PORTLET (MERCHANT_ID);
CREATE INDEX IDX_PORTLET_PAGE_ID_SM ON PORTLET (MERCHANT_ID, PAGE);
CREATE INDEX IDX_PORTLET_PG_COL_ID_SM ON PORTLET (MERCHANT_ID, PAGE, COLUMN_ID);
CREATE INDEX IDX_PORTLET_LABEL_ID_SM ON PORTLET (MERCHANT_ID, LABEL_ID);

-- SQLINES DEMO *** ---------------------------------------
--
-- PAGE
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE PAGE (
	PAGE_ID NUMBER(10) NOT NULL,
	MERCHANT_ID NUMBER(10) NOT NULL,
	HEADER CLOB,
	TITLE VARCHAR2(60) NOT NULL,
	NAME VARCHAR2(100) NULL,
	VISIBLE NUMBER(3) DEFAULT '0',
	ENABLED NUMBER(3) DEFAULT '1',
      SECURED NUMBER(3) DEFAULT '0',
	STYLE NUMBER(10) NOT NULL,
	PROPERTY1 VARCHAR2(120) NULL,
	PROPERTY2 VARCHAR2(120) NULL,
	PROPERTY3 VARCHAR2(120) NULL,   
	PROPERTY4 VARCHAR2(120) NULL, 
	PROPERTY5 VARCHAR2(120) NULL,
      PROPERTY6 VARCHAR2(120) NULL,
      PROPERTY7 VARCHAR2(120) NULL,
      PROPERTY8 VARCHAR2(120) NULL,
      PROPERTY9 VARCHAR2(120) NULL,
      PROPERTY10 VARCHAR2(120) NULL, 
	PRIMARY KEY (PAGE_ID)
) ;

CREATE INDEX IDX_PAGE_MERCHANT_ID_SM ON PAGE (MERCHANT_ID);
CREATE INDEX IDX_TITLE_MERCHANT_ID_SM ON PAGE (MERCHANT_ID,TITLE);


-- SQLINES DEMO *** ---------------------------------------
--
-- DYNAMIC LABEL
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE DYNAMIC_LABEL (
DYNAMIC_LABEL_ID NUMBER(10) NOT NULL,
MERCHANT_ID NUMBER(10) NOT NULL,
TITLE VARCHAR2(60) NULL,
IMAGE VARCHAR2(60) NULL,
SECTION_ID NUMBER(10) NOT NULL,
VISIBLE NUMBER(3) DEFAULT '1', 
SORT_ORDER NUMBER(10) DEFAULT 0,
POSITION NUMBER(10) DEFAULT 0, 
PRIMARY KEY (DYNAMIC_LABEL_ID)
) ;

CREATE INDEX IDX_DYNAMIC_LABEL_ID_SM ON DYNAMIC_LABEL (MERCHANT_ID,SECTION_ID);
CREATE INDEX IDX_DYNAMIC_LABEL_TL_SM ON DYNAMIC_LABEL (MERCHANT_ID,TITLE);
CREATE INDEX IDX_DYNAMIC_LABEL_ST_SM ON DYNAMIC_LABEL (MERCHANT_ID,SECTION_ID);




-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE DYNAMIC_LABEL_DESCRIPTION (
DYNAMIC_LABEL_ID NUMBER(10) NOT NULL,
LANGUAGE_ID NUMBER(10) DEFAULT '1' NOT NULL,
DYNAMIC_LABEL_TITLE VARCHAR2(100) NOT NULL,
SE_URL VARCHAR2(100) NULL,
DYNAMIC_LABEL_DESCRIPTION CLOB,
PRIMARY KEY (DYNAMIC_LABEL_ID,LANGUAGE_ID)
) ;



-- SQLINES DEMO *** ---------------------------------------
--
-- SQLINES DEMO *** OR TABLE 'TAX_CLASS'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE TAX_CLASS (
TAX_CLASS_ID NUMBER(10) NOT NULL,
TAX_CLASS_TITLE VARCHAR2(32) DEFAULT '' NOT NULL,
TAX_CLASS_DESCRIPTION VARCHAR2(255) DEFAULT '' NOT NULL,
LAST_MODIFIED TIMESTAMP(0) DEFAULT NULL,
DATE_ADDED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),
MERCHANTID NUMBER(10) DEFAULT '0',
PRIMARY KEY (TAX_CLASS_ID)
) ;

CREATE INDEX IDX_MERCHANT_TAX_CLASS ON TAX_CLASS (MERCHANTID);

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'TAX_RATES_TAX_TEMPLATE'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE TAX_RATES_TAX_TEMPLATE (
TAX_RATES_ID NUMBER(10) NOT NULL,
TAX_ZONE_ID NUMBER(10) DEFAULT '0' NOT NULL,
TAX_CLASS_ID NUMBER(10) DEFAULT '0' NOT NULL,
TAX_PRIORITY NUMBER(10) DEFAULT '1',
TAX_RATE NUMBER(7,4) DEFAULT '0.0000' NOT NULL,
LAST_MODIFIED TIMESTAMP(0) DEFAULT NULL,
DATE_ADDED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF') NOT NULL,
PIGGYBACK NUMBER(3) DEFAULT '0',
PRIMARY KEY (TAX_RATES_ID)
) ;

-- Generate ID using sequence and trigger
CREATE SEQUENCE TAX_RATES_TAX_TEMPLATE_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TAX_RATES_TAX_TEMPLATE_seq_tr
 BEFORE INSERT ON TAX_RATES_TAX_TEMPLATE FOR EACH ROW
 WHEN (NEW.TAX_RATES_ID IS NULL)
BEGIN
 SELECT TAX_RATES_TAX_TEMPLATE_seq.NEXTVAL INTO :NEW.TAX_RATES_ID FROM DUAL;
END;
/

CREATE INDEX IDX_MERCH_TAX_ZNID_TPL_SM ON TAX_RATES_TAX_TEMPLATE (TAX_ZONE_ID);
CREATE INDEX IDX_MERCH_TX_CLS_IDTPL_SM ON TAX_RATES_TAX_TEMPLATE (TAX_CLASS_ID);

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE TAX_RATES_DESCRIPTION_TAX_TPL (
TAX_RATES_ID NUMBER(10) NOT NULL,
LANGUAGE_ID NUMBER(10) DEFAULT '1' NOT NULL,
TAX_DESCRIPTION VARCHAR2(255) DEFAULT '' NOT NULL,
PRIMARY KEY (TAX_RATES_ID,LANGUAGE_ID)
) ;




-- SQLINES DEMO *** ---------------------------------------


--
-- SQLINES DEMO *** OR TABLE 'ZONES'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE ZONES (
ZONE_ID NUMBER(10) NOT NULL,
ZONE_COUNTRY_ID NUMBER(10) DEFAULT '0' NOT NULL,
ZONE_CODE VARCHAR2(32) DEFAULT '' NOT NULL,
PRIMARY KEY (ZONE_ID)
) ;

-- Generate ID using sequence and trigger
CREATE SEQUENCE ZONES_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER ZONES_seq_tr
 BEFORE INSERT ON ZONES FOR EACH ROW
 WHEN (NEW.ZONE_ID IS NULL)
BEGIN
 SELECT ZONES_seq.NEXTVAL INTO :NEW.ZONE_ID FROM DUAL;
END;
/

CREATE INDEX IDX_ZONE_COUNTRY_ID_SM ON ZONES (ZONE_COUNTRY_ID);
CREATE INDEX IDX_ZONE_CODE_SM ON ZONES (ZONE_CODE);


-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE ZONES_DESCRIPTION (
ZONE_ID NUMBER(10) NOT NULL,
LANGUAGE_ID NUMBER(10) DEFAULT '1' NOT NULL,
ZONE_NAME VARCHAR2(32) DEFAULT '' NOT NULL,
PRIMARY KEY (ZONE_ID,LANGUAGE_ID)
) ;


-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO *** OR TABLE 'ZONES_TO_GEO_ZONES_TAX_TPL'
--

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE ZONES_TO_GEO_ZONES_TAX_TPL (
ASSOCIATION_ID NUMBER(10) NOT NULL,
ZONE_COUNTRY_ID NUMBER(10) DEFAULT '0' NOT NULL,
ZONE_ID NUMBER(10) DEFAULT NULL,
GEO_ZONE_ID NUMBER(10) DEFAULT NULL,
LAST_MODIFIED TIMESTAMP(0) DEFAULT NULL,
DATE_ADDED TIMESTAMP(0) DEFAULT TO_TIMESTAMP('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF') NOT NULL,
PRIMARY KEY (ASSOCIATION_ID)
) ;

CREATE INDEX IDX_ZONES_SM ON ZONES_TO_GEO_ZONES_TAX_TPL (GEO_ZONE_ID,ZONE_COUNTRY_ID,ZONE_ID);

